// Generated by CoffeeScript 1.4.0

/*
Sophus
un langage de programmation inspiré par COBOL
auteurs:
	Alain Busser
	Florian Tobé
©2013
ce logiciel est libre sous license MIT
*/


(function() {
  var Variable, aLaPuissance, aMoinsQue, arrondir, auCarré, auCube, augmenter, carré, centupler, cinq, cinquième, cinquièmes, cos, cosinus, cube, dans, de, demi, demis, deux, diminuer, diviser, dix, dixième, dixièmes, doubler, décimales, décrémenter, décupler, entrer, estTableau, extraireLaRacineDe, huit, huitième, huitièmes, incrémenter, inverser, mettre, mettreDans, montrer, multiplier, neuf, neuvième, neuvièmes, octupler, par, pourcent, pourcents, près, quadrupler, quart, quarts, quatre, quintupler, racine, sept, septième, septièmes, sextupler, si, sin, sinon, sinus, six, sixième, sixièmes, taille, tan, tangente, tiers, tripler, trois, tronquer, un, x, à, élever, éleverAuCarré, éleverAuCube, π, _ref, _ref1, _ref2,
    _this = this;

  Boolean.prototype.toLocaleString = function() {
    if (this.valueOf()) {
      return " c'est vrai ";
    } else {
      return " c'est faux ";
    }
  };

  Number.prototype.foisFaire = function(fn) {
    var i, _i, _results;
    _results = [];
    for (i = _i = 0; 0 <= this ? _i < this : _i > this; i = 0 <= this ? ++_i : --_i) {
      _results.push(fn());
    }
    return _results;
  };

  Number.prototype.tantQuePlusGrandQue = function(variable, fn) {
    var _results;
    _results = [];
    while (variable.valeur < this) {
      _results.push(fn());
    }
    return _results;
  };

  Number.prototype.tantQuePlusPetitQue = function(variable, fn) {
    var _results;
    _results = [];
    while (variable.valeur > this) {
      _results.push(fn());
    }
    return _results;
  };

  Array.prototype.empiler = function(machin) {
    return this.push(machin);
  };

  Array.prototype.toLocaleString = "[" + ((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      x = this[_i];
      _results.push(x.toLocaleString());
    }
    return _results;
  }).call(this)) + "]";

  estTableau = function(o) {
    if ((o.valeur != null) && Array.isArray(o.valeur)) {
      return true;
    } else {
      return Array.isArray(o);
    }
  };

  taille = function(o) {
    if (o.valeur != null) {
      return o.valeur.length;
    } else {
      return o.length;
    }
  };

  décimales = "décimales";

  près = "près";

  à = "à";

  de = "de";

  par = "par";

  dans = "dans";

  sinon = "sinon";

  pourcents = "pourcents";

  pourcent = "pourcents";

  auCarré = "au carré";

  auCube = "au cube";

  aLaPuissance = "à la puissance";

  _ref = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], un = _ref[0], deux = _ref[1], trois = _ref[2], quatre = _ref[3], cinq = _ref[4], six = _ref[5], sept = _ref[6], huit = _ref[7], neuf = _ref[8], dix = _ref[9];

  _ref1 = ["demis", "tiers", "quarts", "cinquièmes", "sixièmes", "septièmes", "huitièmes", "neuvièmes", "dixièmes"], demis = _ref1[0], tiers = _ref1[1], quarts = _ref1[2], cinquièmes = _ref1[3], sixièmes = _ref1[4], septièmes = _ref1[5], huitièmes = _ref1[6], neuvièmes = _ref1[7], dixièmes = _ref1[8];

  _ref2 = ["demis", "tiers", "quarts", "cinquièmes", "sixièmes", "septièmes", "huitièmes", "neuvièmes", "dixièmes"], demi = _ref2[0], tiers = _ref2[1], quart = _ref2[2], cinquième = _ref2[3], sixième = _ref2[4], septième = _ref2[5], huitième = _ref2[6], neuvième = _ref2[7], dixième = _ref2[8];

  π = Math.PI;

  montrer = function(o) {
    if (o.valeur != null) {
      if (Array.isArray(o.valeur)) {
        return alert("[" + ((function() {
          var _i, _len, _ref3, _results;
          _ref3 = o.valeur;
          _results = [];
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            x = _ref3[_i];
            _results.push(" " + x.toLocaleString() + " ");
          }
          return _results;
        })()) + "]");
      } else {
        return alert(o.valeur.toLocaleString());
      }
    } else {
      if (((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = o.length; _i < _len; _i++) {
          x = o[_i];
          _results.push(x);
        }
        return _results;
      })()).length > 1) {
        return alert("[" + ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = o.length; _i < _len; _i++) {
            x = o[_i];
            _results.push(" " + x.toLocaleString() + " ");
          }
          return _results;
        })()) + "]");
      } else {
        return alert(o.toLocaleString());
      }
    }
  };

  entrer = function(o) {
    return o.valeur = prompt("Quelle valeur donner à cette variable ?");
  };

  Variable = (function() {

    function Variable(valeur) {
      this.valeur = valeur != null ? valeur : 0;
    }

    Variable.prototype.toString = function() {
      return this.valeur.toLocaleString();
    };

    Variable.prototype.estPositif = function() {
      return this.valeur > 0;
    };

    Variable.prototype.estNégatif = function() {
      return this.valeur < 0;
    };

    Variable.prototype.estNul = function() {
      return this.valeur === 0;
    };

    Variable.prototype.estPair = function() {
      return this.valeur % 2 === 0;
    };

    Variable.prototype.estImpair = function() {
      return this.valeur % 2 === 1;
    };

    return Variable;

  })();

  mettreDans = function(o, bidule) {
    var _ref3;
    o.valeur = (_ref3 = bidule.valeur) != null ? _ref3 : bidule;
    return null;
  };

  mettre = function(bidule, dans, o) {
    var _ref3;
    if (dans == null) {
      dans = "dans";
    }
    o.valeur = (_ref3 = bidule.valeur) != null ? _ref3 : bidule;
    return null;
  };

  carré = function(nombre) {
    return nombre * nombre;
  };

  cube = function(nombre) {
    return carré(nombre) * nombre;
  };

  racine = function(nombre) {
    return Math.sqrt(nombre);
  };

  sinus = function(nombre) {
    return Math.sin(nombre * π / 180);
  };

  cosinus = function(nombre) {
    return Math.cos(nombre * π / 180);
  };

  tangente = function(nombre) {
    return sinus(nombre) / cosinus(nombre);
  };

  sin = function(x) {
    return Math.sin(x);
  };

  cos = function(x) {
    return Math.cos(x);
  };

  tan = function(x) {
    return Math.tan(x);
  };

  éleverAuCarré = function(o) {
    return o.valeur *= o.valeur;
  };

  éleverAuCube = function(o) {
    return o.valeur *= o.valeur * o.valeur;
  };

  inverser = function(o) {
    return o.valeur = 1 / o.valeur;
  };

  extraireLaRacineDe = function(o) {
    return o.valeur = Math.sqrt(o.valeur);
  };

  élever = function(o, a, exposant) {
    var _ref3;
    if (exposant == null) {
      exposant = 2;
    }
    switch (a) {
      case "à la puissance":
        return o.valeur = Math.pow(o.valeur, (_ref3 = exposant.valeur) != null ? _ref3 : exposant);
      case "au carré":
        return o.valeur *= o.valeur;
      case "au cube":
        return o.valeur *= o.valeur * o.valeur;
      default:
        return alert("Je veux bien élever cette variable mais à quelle puissance ?");
    }
  };

  arrondir = function(o, a, epsilon, ordre) {
    if (a == null) {
      a = "";
    }
    if (epsilon == null) {
      epsilon = 1;
    }
    if (ordre == null) {
      ordre = "décimales";
    }
    if (a === "") {
      o.valeur = Math.round(o.valeur);
    }
    if (a === "à") {
      if (ordre === "décimales") {
        o.valeur = Math.round(o.valeur * Math.pow(10, epsilon)) / Math.pow(10, epsilon);
      }
      if (ordre === "près") {
        return o.valeur = Math.round(o.valeur / epsilon) * epsilon;
      }
    }
  };

  tronquer = function(o, a, epsilon, ordre) {
    if (a == null) {
      a = "";
    }
    if (epsilon == null) {
      epsilon = 1;
    }
    if (ordre == null) {
      ordre = "décimales";
    }
    if (a === "") {
      o.valeur = Math.floor(o.valeur);
    }
    if (a === "à") {
      if (ordre === "décimales") {
        o.valeur = Math.floor(o.valeur * Math.pow(10, epsilon)) / Math.pow(10, epsilon);
      }
      if (ordre === "près") {
        return o.valeur = Math.floor(o.valeur / epsilon) * epsilon;
      }
    }
  };

  doubler = function(o) {
    if (Array.isArray(o.valeur)) {
      return o.valeur = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = o.valeur;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          x = _ref3[_i];
          _results.push(2 * x);
        }
        return _results;
      })();
    } else {
      return o.valeur *= 2;
    }
  };

  tripler = function(o) {
    if (Array.isArray(o.valeur)) {
      return o.valeur = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = o.valeur;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          x = _ref3[_i];
          _results.push(3 * x);
        }
        return _results;
      })();
    } else {
      return o.valeur *= 3;
    }
  };

  quadrupler = function(o) {
    if (Array.isArray(o.valeur)) {
      return o.valeur = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = o.valeur;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          x = _ref3[_i];
          _results.push(4 * x);
        }
        return _results;
      })();
    } else {
      return o.valeur *= 4;
    }
  };

  quintupler = function(o) {
    if (Array.isArray(o.valeur)) {
      return o.valeur = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = o.valeur;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          x = _ref3[_i];
          _results.push(5 * x);
        }
        return _results;
      })();
    } else {
      return o.valeur *= 5;
    }
  };

  sextupler = function(o) {
    if (Array.isArray(o.valeur)) {
      return o.valeur = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = o.valeur;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          x = _ref3[_i];
          _results.push(6 * x);
        }
        return _results;
      })();
    } else {
      return o.valeur *= 6;
    }
  };

  octupler = function(o) {
    if (Array.isArray(o.valeur)) {
      return o.valeur = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = o.valeur;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          x = _ref3[_i];
          _results.push(8 * x);
        }
        return _results;
      })();
    } else {
      return o.valeur *= 8;
    }
  };

  décupler = function(o) {
    if (Array.isArray(o.valeur)) {
      return o.valeur = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = o.valeur;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          x = _ref3[_i];
          _results.push(10 * x);
        }
        return _results;
      })();
    } else {
      return o.valeur *= 10;
    }
  };

  centupler = function(o) {
    if (Array.isArray(o.valeur)) {
      return o.valeur = (function() {
        var _i, _len, _ref3, _results;
        _ref3 = o.valeur;
        _results = [];
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          x = _ref3[_i];
          _results.push(100 * x);
        }
        return _results;
      })();
    } else {
      return o.valeur *= 100;
    }
  };

  incrémenter = function(o) {
    o.valeur += 1;
    return null;
  };

  décrémenter = function(o) {
    o.valeur -= 1;
    return null;
  };

  augmenter = function(o, de, chouia, mode) {
    var _ref10, _ref11, _ref12, _ref13, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (mode == null) {
      mode = "";
    }
    if (estTableau(o)) {
      if (mode === "") {
        if (estTableau(chouia)) {
          if ((taille(chouia)) === (taille(o))) {
            o.valeur = o.valeur.map(function(courant, place) {
              var _ref3;
              return courant + ((_ref3 = chouia.valeur) != null ? _ref3 : chouia)[place];
            });
          } else {
            alert("erreur de dimension");
          }
        }
      }
    } else {
      if (de === "de") {
        switch (mode) {
          case "":
            o.valeur += (_ref3 = chouia.valeur) != null ? _ref3 : chouia;
            break;
          case "demis":
            o.valeur *= 1 + ((_ref4 = chouia.valeur) != null ? _ref4 : chouia) / 2;
            break;
          case "tiers":
            o.valeur *= 1 + ((_ref5 = chouia.valeur) != null ? _ref5 : chouia) / 3;
            break;
          case "quarts":
            o.valeur *= 1 + ((_ref6 = chouia.valeur) != null ? _ref6 : chouia) / 4;
            break;
          case "cinquièmes":
            o.valeur *= 1 + ((_ref7 = chouia.valeur) != null ? _ref7 : chouia) / 5;
            break;
          case "sixièmes":
            o.valeur *= 1 + ((_ref8 = chouia.valeur) != null ? _ref8 : chouia) / 6;
            break;
          case "septièmes":
            o.valeur *= 1 + ((_ref9 = chouia.valeur) != null ? _ref9 : chouia) / 7;
            break;
          case "huitièmes":
            o.valeur *= 1 + ((_ref10 = chouia.valeur) != null ? _ref10 : chouia) / 8;
            break;
          case "neuvièmes":
            o.valeur *= 1 + ((_ref11 = chouia.valeur) != null ? _ref11 : chouia) / 9;
            break;
          case "dixièmes":
            o.valeur *= 1 + ((_ref12 = chouia.valeur) != null ? _ref12 : chouia) / 10;
            break;
          case "pourcents":
            o.valeur *= 1 + ((_ref13 = chouia.valeur) != null ? _ref13 : chouia) / 100;
        }
      } else {
        alert("Je veux bien augmenter cette variable mais de combien ?");
      }
    }
    return null;
  };

  diminuer = function(o, de, chouia, mode) {
    var _ref10, _ref11, _ref12, _ref13, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (mode == null) {
      mode = "";
    }
    if (estTableau(o)) {
      if (mode === "") {
        if (estTableau(chouia)) {
          if ((taille(chouia)) === (taille(o))) {
            o.valeur = o.valeur.map(function(courant, place) {
              var _ref3;
              return courant - ((_ref3 = chouia.valeur) != null ? _ref3 : chouia)[place];
            });
          } else {
            alert("erreur de dimension");
          }
        }
      }
    } else {
      if (de === "de") {
        switch (mode) {
          case "":
            o.valeur -= (_ref3 = chouia.valeur) != null ? _ref3 : chouia;
            break;
          case "demis":
            o.valeur *= 1 - ((_ref4 = chouia.valeur) != null ? _ref4 : chouia) / 2;
            break;
          case "tiers":
            o.valeur *= 1 - ((_ref5 = chouia.valeur) != null ? _ref5 : chouia) / 3;
            break;
          case "quarts":
            o.valeur *= 1 - ((_ref6 = chouia.valeur) != null ? _ref6 : chouia) / 4;
            break;
          case "cinquièmes":
            o.valeur *= 1 - ((_ref7 = chouia.valeur) != null ? _ref7 : chouia) / 5;
            break;
          case "sixièmes":
            o.valeur *= 1 - ((_ref8 = chouia.valeur) != null ? _ref8 : chouia) / 6;
            break;
          case "septièmes":
            o.valeur *= 1 - ((_ref9 = chouia.valeur) != null ? _ref9 : chouia) / 7;
            break;
          case "huitièmes":
            o.valeur *= 1 - ((_ref10 = chouia.valeur) != null ? _ref10 : chouia) / 8;
            break;
          case "neuvièmes":
            o.valeur *= 1 - ((_ref11 = chouia.valeur) != null ? _ref11 : chouia) / 9;
            break;
          case "dixièmes":
            o.valeur *= 1 - ((_ref12 = chouia.valeur) != null ? _ref12 : chouia) / 10;
            break;
          case "pourcents":
            o.valeur *= 1 - ((_ref13 = chouia.valeur) != null ? _ref13 : chouia) / 100;
        }
      } else {
        alert("Je veux bien diminuer cette variable mais de combien ?");
      }
    }
    return null;
  };

  multiplier = function(o, par, facteur, mode) {
    var _ref10, _ref11, _ref12, _ref13, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (par == null) {
      par = "par";
    }
    if (mode == null) {
      mode = "";
    }
    if (estTableau(o)) {
      return o.valeur = o.valeur.map(function(courant) {
        var _ref3;
        return courant *= (_ref3 = facteur.valeur) != null ? _ref3 : facteur;
      });
    } else {
      if (par === "par") {
        switch (mode) {
          case "":
            return o.valeur *= (_ref3 = facteur.valeur) != null ? _ref3 : facteur;
          case "demis":
            return o.valeur *= ((_ref4 = facteur.valeur) != null ? _ref4 : facteur) / 2;
          case "tiers":
            return o.valeur *= ((_ref5 = facteur.valeur) != null ? _ref5 : facteur) / 3;
          case "quarts":
            return o.valeur *= ((_ref6 = facteur.valeur) != null ? _ref6 : facteur) / 4;
          case "cinquièmes":
            return o.valeur *= ((_ref7 = facteur.valeur) != null ? _ref7 : facteur) / 5;
          case "sixièmes":
            return o.valeur *= ((_ref8 = facteur.valeur) != null ? _ref8 : facteur) / 6;
          case "septièmes":
            return o.valeur *= ((_ref9 = facteur.valeur) != null ? _ref9 : facteur) / 7;
          case "huitièmes":
            return o.valeur *= ((_ref10 = facteur.valeur) != null ? _ref10 : facteur) / 8;
          case "neuvièmes":
            return o.valeur *= ((_ref11 = facteur.valeur) != null ? _ref11 : facteur) / 9;
          case "dixièmes":
            return o.valeur *= ((_ref12 = facteur.valeur) != null ? _ref12 : facteur) / 10;
          case "pourcents":
            return o.valeur *= ((_ref13 = facteur.valeur) != null ? _ref13 : facteur) / 100;
          default:
            return alert("erreur opérateur");
        }
      } else {
        return alert("Je veux bien multiplier cette variable mais par quoi ?");
      }
    }
  };

  diviser = function(o, par, facteur, mode) {
    var _ref10, _ref11, _ref12, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    if (par == null) {
      par = "par";
    }
    if (mode == null) {
      mode = "";
    }
    if (estTableau(o)) {
      return o.valeur = o.valeur.map(function(courant) {
        var _ref3;
        return courant /= (_ref3 = facteur.valeur) != null ? _ref3 : facteur;
      });
    } else {
      if (par === "par") {
        switch (mode) {
          case "":
            return o.valeur /= (_ref3 = facteur.valeur) != null ? _ref3 : facteur;
          case "demis":
            return o.valeur /= ((_ref4 = facteur.valeur) != null ? _ref4 : facteur) / 2;
          case "tiers":
            return o.valeur /= ((_ref5 = facteur.valeur) != null ? _ref5 : facteur) / 3;
          case "quarts":
            return o.valeur /= ((_ref6 = facteur.valeur) != null ? _ref6 : facteur) / 4;
          case "cinquièmes":
            return o.valeur /= ((_ref7 = facteur.valeur) != null ? _ref7 : facteur) / 5;
          case "sixièmes":
            return o.valeur /= ((_ref8 = facteur.valeur) != null ? _ref8 : facteur) / 6;
          case "septièmes":
            return o.valeur /= ((_ref9 = facteur.valeur) != null ? _ref9 : facteur) / 7;
          case "huitièmes":
            return o.valeur /= ((_ref10 = facteur.valeur) != null ? _ref10 : facteur) / 8;
          case "neuvièmes":
            return o.valeur /= ((_ref11 = facteur.valeur) != null ? _ref11 : facteur) / 9;
          case "dixièmes":
            return o.valeur /= ((_ref12 = facteur.valeur) != null ? _ref12 : facteur) / 10;
          default:
            return alert("erreur opérateur");
        }
      } else {
        return alert("Je veux bien diviser cette variable mais par quoi ?");
      }
    }
  };

  si = function(booleen, fonction) {
    if (booleen) {
      fonction();
    }
    return null;
  };

  aMoinsQue = function(booleen, fonction) {
    if (!booleen) {
      fonction();
    }
    return null;
  };

  /*présentation
  */


  $(function() {
    $("#manuel").hide(10);
    $("#syntaxe").on("click", function() {
      return $("#manuel").toggle(1000);
    });
    return $("#runCoff0").on("click", function() {
      try {
        return eval(CoffeeScript.compile($("#scriptCoff0").val()));
      } catch (e) {
        return alert(e);
      }
    });
  });

}).call(this);
