// Generated by CoffeeScript 1.11.1
Blockly.Blocks['sophus_angle'] = {
  init: function() {
    this.jsonInit({
      id: 'sophus_degres',
      message0: 'ángulo %1',
      args0: {
        type: 'field_angle',
        name: 'angle',
        angle: 90
      },
      output: null,
      tooltip: 'angle en degrés',
      colour: Blockly.Blocks.math.HUE,
      helpUrl: ''
    });
  }
};

Blockly.Blocks['sophus_carre'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_CARRE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.png',
          'width': 64,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_CARRE_TITLE_ITEM
        }, {
          'type': 'field_dropdown',
          'name': 'POW',
          'options': [['al cuadrado', '2'], ['al cubo', '3'], ['a la 4 potencia', '4']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_CARRE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_CARRE_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_doubler'] = {
  init: function() {
    var dropdown, variable;
    dropdown = new Blockly.FieldDropdown([['doblar', '2'], ['triplicar', '3'], ['quadruplicar', '4'], ['quintuplicar', '5'], ['sextuplicar', '6'], ['x 10', '10'], ['x 100', '100']]);
    variable = new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME);
    this.appendDummyInput().appendField(new Blockly.FieldImage('./img/multiplier.png', 64, 32, '[*]:   ')).appendField(dropdown, 'CHOIX').appendField('la variable').appendField(variable, 'VAR');
    this.setHelpUrl('');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(Blockly.Blocks.variables.HUE);
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_AUGMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 aumentar %2 de %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['/ 100', '100'], ['/ 2', '2'], ['/ 3', '3'], ['/ 4', '4'], ['/ 5', '5'], ['/ 6', '6'], ['/ 7', '7'], ['/ 8', '8'], ['/ 9', '9'], ['/ 10', '10'], ['/ 100', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter_pct'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_AUGMENTER_PCT_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_PCT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.math.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_PCT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_PCT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIMINUER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 disminuir %2 de %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['/100', '100'], ['/ 2', '2'], ['/ 3', '3'], ['/ 4', '4'], ['/ 5', '5'], ['/ 6', '6'], ['/ 7', '7'], ['/ 8', '8'], ['/ 9', '9'], ['/ 10', '10'], ['/ 100', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer_pct'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIMINUER_PCT_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_PCT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.math.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_PCT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_PCT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_multiplier'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.png',
          'width': 64,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diviser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIVISER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.png',
          'width': 64,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_multiplier_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 multiplicar %2 por %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.png',
          'width': 64,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['/100', '100'], ['/ 2', '2'], ['/ 3', '3'], ['/ 4', '4'], ['/ 5', '5'], ['/ 6', '6'], ['/ 7', '7'], ['/ 8', '8'], ['/ 9', '9'], ['/ 10', '10'], ['/ 100', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diviser_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 dividir %2 por %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.png',
          'width': 64,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['/100', '100'], ['/ 2', '2'], ['/ 3', '3'], ['/ 4', '4'], ['/ 5', '5'], ['/ 6', '6'], ['/ 7', '7'], ['/ 8', '8'], ['/ 9', '9'], ['/ 10', '10'], ['/ 100', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIVISER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIVISER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_arrondir'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 redondear %2 à %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/arrondi.png',
          'width': 64,
          'height': 32,
          'alt': '[O]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_ARRONDIR_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'GRAD',
          'options': [['decimales', '1e-'], ['cerca', '']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_ARRONDIR_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_ARRONDIR_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_tronquer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 trucar %2 à %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/troncature.png',
          'width': 64,
          'height': 32,
          'alt': '[o]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_TRONQUER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'GRAD',
          'options': [['decimales', '1e-'], ['cerca', '']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_TRONQUER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_TRONQUER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};


/*

Blockly.Blocks['sophus_arrondi'] = {
  init: function() {
    this.jsonInit({
  "message0": "arrondi de %1 à %2 %3",
  "args0": [
        {
          "type": "field_variable",
          "name": "VAR",
          "variable": Blockly.Msg.SOPHUS_ARRONDI_TITLE_ITEM
        },
    {
      "type": "field_dropdown",
      "name": "GRAD",
      "options": [
        [
          "décimales",
          "1e-"
        ],
        [
          "près",
          ""
        ]
      ]
    }
  ],
  "inputsInline": true,
  "output": "Number",
      "colour": Blockly.Blocks.math.HUE,
      "helpUrl": Blockly.Msg.SOPHUS_ARRONDI_HELPURL
});
    var thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_ARRONDI_TOOLTIP.replace('%1',
          thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};
 */

Blockly.Blocks['sophus_puissance'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_PUISSANCE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.png',
          'width': 64,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_PUISSANCE_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'POW',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_PUISSANCE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_PUISSANCE_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_inverser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_inverser',
      'message0': Blockly.Msg.SOPHUS_INVERSER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/inverse.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INVERSER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_INVERSER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INVERSER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_incrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_incrementer',
      'message0': Blockly.Msg.SOPHUS_INCREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INCREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_INCREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INCREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_decrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_decrementer',
      'message0': Blockly.Msg.SOPHUS_DECREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DECREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DECREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DECREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['big_aff'] = {
  init: function() {
    this.appendValueInput('VAR').appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField(' escribir en consola');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(20);
    this.setTooltip('Escribir en la Consola');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['big_efface'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('limpia la consola texto');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(20);
    this.setTooltip('limpia la consola de texto');
    this.setHelpUrl('https://fr.wikipedia.org/wiki/Palimpseste');
  }
};

Blockly.Blocks['tortue_x'] = {
  init: function() {
    this.appendDummyInput().appendField('abscisa de la tortuga');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('abscisa actual de la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_y'] = {
  init: function() {
    this.appendDummyInput().appendField('ordenada de la tortuga');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('orden actual de la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_t'] = {
  init: function() {
    this.appendDummyInput().appendField('ángulo de la tortuga');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('angulo de la tortuga con la horizontal');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_c'] = {
  init: function() {
    this.appendDummyInput().appendField('color de la tortuga');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('color de la pluma');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['avancer'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('avanzar');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('avanzar la toruga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['reculer'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('retroceder');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('retroceder la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_gauche'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('a la izquierda de').appendField(new Blockly.FieldAngle(90), 'NAME');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('girar la tortuga hacia la izquierda');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_droite'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('a la derecha de').appendField(new Blockly.FieldAngle(90), 'NAME');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('girar la tortuga a la derecha');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['var_gauche'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('girar a la izquierda');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('girar a la izquierda d\'un angulo en grados');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['var_droite'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('girar a la derecha');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('girar a la derecha d\'un ángulo en grados');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mettre_angle'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('guiar la tortuga');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('imponer una dirección a la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['teleport'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('posicionar la tortuga en (').appendField(new Blockly.FieldTextInput('0'), 'X').appendField(',').appendField(new Blockly.FieldTextInput('0'), 'Y').appendField(')');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('teletransportarse sin cambiar l\'ángulo o hacer ruta');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_teleport'] = {
  init: function() {
    this.appendValueInput('ABS').setCheck('Number').appendField('posicionar la tortuga en (');
    this.appendValueInput('ORD').setCheck('Number').appendField(',');
    this.appendDummyInput().appendField(')');
    this.setInputsInline(true);
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('posicionar la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tampon'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('marcar un punto');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('marcar un circulo en el emplazamiento de la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['teleport_var'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('téléporter la tortue en (').appendField(new Blockly.FieldVariable('x'), 'X').appendField(',').appendField(new Blockly.FieldVariable('y'), 'Y').appendField(')');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('mover la tortuga para las variables de coordenadas');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['cacher_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/ghost.png', 32, 32, '')).appendField('ocultar la tortuga');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('hacer invisible la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['montrer_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('mostrar la tortuga');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('hacer la tortuga visible');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['lever_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('subir la pluma');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Ahora la tortuga no dibuja');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['baisser_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('bajar la pluma');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Ahora la tortuga dibuja');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['scribe'] = {
  init: function() {
    this.appendValueInput('texte').appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('sellar texto');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('la tortga escribe texto');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['couleur_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('color de la pluma').appendField(new Blockly.FieldColour('#000066'), 'colstyle');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('cambia el color del lapiz');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['eff_svg'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('borrar los gráficos de tortuga');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('borrar la pantalla gráfica');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['reset'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('borra la consola gráfica');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('borra el contenido de la consola gráfica(excepto el color)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axeX'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('eje de abcisas');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('desiganr el eje de abcisas');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axeY'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('eje de ordenadas');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('designar el eje de ordenadas');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axes'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('dibujar la marca');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('dibujo los dos ejes en la tortuga gráfico');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['grille'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('dibujar una cuadrícula');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('rejilla ortonormal');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['creer_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Creer la tortue #').appendField(new Blockly.FieldTextInput('1'), 'N');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Crear una tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['creer_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Crear Tortuga #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Crear una tortuga (String)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['choisir_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Con la tortuga').appendField(new Blockly.FieldTextInput('1'), 'N');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Elegir una tortuga');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('hacer');
  }
};

Blockly.Blocks['choisir_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Con la tortuga #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Con la tortuga (Numero)');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('hacer');
  }
};

Blockly.Blocks['distance_avec_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Distancia con la tortuga #');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('Distancia a la tortuga (Numero)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tourner_vers_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Volver hacia arriba la tortuga #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Volver a la tortuga (Numero)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume_suivant'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('cambiar siguiente tortuga');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('cambiar el aspecto de la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume_pred'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('cambiar tortuga anterior');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('cambiar el aspecto de la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('elegir imagen').appendField(new Blockly.FieldDropdown([["origen", "0"], ["izquierda", "1"], ["derecha", "2"], ["Frente", "3"], ["metal", "4"], ["clásica", "5"]]), "CID");
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('cambiar el aspecto de la tortuga');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_const'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'x');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('2'), 'y');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vector 2D');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_3D'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'x');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('2'), 'y');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('1'), 'z');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vector 3D');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_alea'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('vector aleatorio');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vector aleatorio');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_alea3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('vector aleatorio');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vector aleatorio');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_nul'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('vector nulo');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vector nulo');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_nul3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('vector nulo');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vector nulo');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_aff'] = {
  init: function() {
    this.appendValueInput('vec').appendField(new Blockly.FieldImage('img/arrowhead.png', 32, 32, ''));
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('visibilizar las matrices');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_eq'] = {
  init: function() {
    this.appendValueInput('autre').setCheck(['Vector', 'Matriz']).appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('=');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('igualdad de matrices');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_add'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('+');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('suma');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_sub'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('-');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('resta');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_dot'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('.');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('producto escalar');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_angle'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('angulo');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('');
    this.setHelpUrl('ángulo de vector (en radianes)');
  }
};

Blockly.Blocks['vec_distance'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('distancia hasta');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('');
    this.setHelpUrl('distancia entre los vectores (considerados puntos)');
  }
};

Blockly.Blocks['vec_abscisse'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('abscisa de');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('abcisa del vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_ordonnee'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('ordenadas de');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('ordenada del vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_expr'] = {
  init: function() {
    this.appendDummyInput().appendField("Vector");
    this.appendValueInput("ABS").appendField("x: ");
    this.appendValueInput("ORD").appendField("y: ");
    this.setInputsInline(true);
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('vector variable');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_expr3D'] = {
  init: function() {
    this.appendDummyInput().appendField("Vector");
    this.appendValueInput("ABS").appendField("x: ");
    this.appendValueInput("ORD").appendField("y: ");
    this.appendValueInput("COT").appendField("z: ");
    this.setInputsInline(true);
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('vector variable');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_cote'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('cote de');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('cuota del vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_colineaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('es colineal con');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('colinealidad de prueba (paralelismo o alineación)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_perpendiculaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('es perpendicular a');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('perpendicularidad entre los vectores');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_fois'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Number').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('×');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('producido por una serie');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_foisbis'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldTextInput('3'), 'facteur').appendField('×');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('producto número matriz *');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_symmetry'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('simétrico a');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('simetría central');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_rotation'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('elemento'), 'lui').appendField('convertido').appendField(new Blockly.FieldTextInput('3.14'), 'angulo').appendField('radianes por rotación');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('rotacion ángulo fijo');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_norme'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('unitario');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('unitario (o longitud)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_unitaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('Normalización');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vector unitario colineal con este vector ');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_diagonal'] = {
  init: function() {
    this.appendValueInput('vector').setCheck('Vector').appendField('diagonal');
    this.setOutput(true, 'Matrix');
    this.setColour(20);
    this.setTooltip('matriz diagonal');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_matrice'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('3'), 'a11').appendField(new Blockly.FieldTextInput('-2'), 'a12');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('1'), 'a21').appendField(new Blockly.FieldTextInput('5'), 'a22');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz 2 por 2');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_3D'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('8'), 'a11').appendField(new Blockly.FieldTextInput('1'), 'a12').appendField(new Blockly.FieldTextInput('6'), 'a13');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('3'), 'a21').appendField(new Blockly.FieldTextInput('5'), 'a22').appendField(new Blockly.FieldTextInput('7'), 'a23');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('4'), 'a31').appendField(new Blockly.FieldTextInput('9'), 'a32').appendField(new Blockly.FieldTextInput('2'), 'a33');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz 3 por 3');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_col'] = {
  init: function() {
    this.appendDummyInput().appendField("columnas");
    this.appendValueInput("C1");
    this.appendValueInput("C2");
    this.setInputsInline(true);
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    return this.setTooltip('matriz por columnas');
  }
};

Blockly.Blocks['mat3D_col'] = {
  init: function() {
    this.appendDummyInput().appendField("columnas");
    this.appendValueInput("C1");
    this.appendValueInput("C2");
    this.appendValueInput("C3");
    this.setInputsInline(true);
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    return this.setTooltip('matriz por columnas');
  }
};

Blockly.Blocks['mat_diag'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'a11').appendField('0');
    this.appendDummyInput().appendField('0').appendField(new Blockly.FieldTextInput('2'), 'a22');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz diagonal');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_id'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('1').appendField('0');
    this.appendDummyInput().appendField('0').appendField('1');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz de identidad');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_id3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('1').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('1').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('1');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz de identidad');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_alea'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldImage('img/die.png', 32, 32, 'X'));
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz aleatoria');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_alea3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldImage('img/die.png', 32, 32, 'X'));
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz aleatoria');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_nulle'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz nula');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_nulle3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('0').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('0');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz nula');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_rotation'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('rotation d\'angle').appendField(new Blockly.FieldAngle(45), 'angle');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz de rotación');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne1'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matriz').appendField('primera columna de');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('la primera columna de la matriz es un vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne2'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('segunda columna');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('la segunda columna de la matriz es un vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne3'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('tercera columna');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('la tercera columna de la matriz es un vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_diagonal'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matriz').appendField('diagonal de');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('la diagonal de la matriz es un vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_det'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matriz').appendField('determinante de');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('determinante');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_inv'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('inversa de');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('matriz inversa');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_mult'] = {
  init: function() {
    this.appendValueInput('otro').appendField(new Blockly.FieldVariable('matriz'), 'lui').appendField('×');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('producto de matriz (o de la matriz y vector)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_arrondi'] = {
  init: function() {
    this.appendValueInput('otro').appendField('redondeo de');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('redondeo');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_trace'] = {
  init: function() {
    this.appendValueInput('otro').setCheck('Matriz').appendField('traza de');
    this.setOutput(true, 'Numero');
    this.setColour(120);
    this.setTooltip('traza de la matriz');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_transpose'] = {
  init: function() {
    this.appendValueInput('otro').setCheck('Matriz').appendField('traspuesta de');
    this.setOutput(true, 'Matriz');
    this.setColour(120);
    this.setTooltip('transposición de matriz');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['repeter_doucement'] = {
  init: function() {
    this.appendValueInput('TIMES').setCheck('Numero').appendField('repetir lentamente');
    this.appendDummyInput().appendField('fois');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Repetir cada 500 ms');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('hacer');
  }
};

Blockly.Blocks['lentement'] = {
  init: function() {
    this.appendDummyInput().appendField('Muy lentamente');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Ralentizar la tortuga (arriesgado)');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('hacer');
  }
};
