// Generated by CoffeeScript 1.11.1
Blockly.Blocks['sophus_angle'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldAngle(90), 'NAME');
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('angle en degr√©s');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['sophus_carre'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_CARRE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.gif',
          'width': 32,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_CARRE_TITLE_ITEM
        }, {
          'type': 'field_dropdown',
          'name': 'POW',
          'options': [['to the square', '2'], ['to the third power', '3'], ['to the fourth power', '4']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_CARRE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_CARRE_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_doubler'] = {
  init: function() {
    var dropdown, variable;
    dropdown = new Blockly.FieldDropdown([['double', '2'], ['triple', '3'], ['quadruple', '4'], ['quintuple', '5'], ['sextuple', '6'], ['decuple', '10'], ['centuple', '100']]);
    variable = new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME);
    this.appendDummyInput().appendField(new Blockly.FieldImage('./img/multiplier.gif', 64, 32, '[*]:   ')).appendField(dropdown, 'CHOIX').appendField('').appendField(variable, 'VAR');
    this.setHelpUrl('');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(Blockly.Blocks.variables.HUE);
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_AUGMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.gif',
          'width': 32,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 to %2 add %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.gif',
          'width': 32,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['percents', '100'], ['halves', '2'], ['thirds', '3'], ['quarters', '4'], ['fifths', '5'], ['sixths', '6'], ['sevenths', '7'], ['eighths', '8'], ['ninths', '9'], ['tenths', '10'], ['hundredths', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter_pct'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_AUGMENTER_PCT_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.gif',
          'width': 32,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_PCT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.math.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_PCT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_PCT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIMINUER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.gif',
          'width': 32,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 to %2 subtract %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.gif',
          'width': 32,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['percents', '100'], ['halves', '2'], ['thirds', '3'], ['quarters', '4'], ['fifths', '5'], ['sixths', '6'], ['sevenths', '7'], ['eighths', '8'], ['ninths', '9'], ['tenths', '10'], ['hundredths', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer_pct'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIMINUER_PCT_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.gif',
          'width': 32,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_PCT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.math.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_PCT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_PCT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_multiplier'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.gif',
          'width': 32,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diviser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIVISER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.gif',
          'width': 32,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_multiplier_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 multiply %2 by %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.gif',
          'width': 32,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['percents', '100'], ['halves', '2'], ['thirds', '3'], ['quarters', '4'], ['fifths', '5'], ['sixths', '6'], ['sevenths', '7'], ['eighths', '8'], ['ninths', '9'], ['tenths', '10'], ['hundredths', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diviser_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 divide %2 by %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.gif',
          'width': 32,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['percents', '100'], ['halves', '2'], ['thirds', '3'], ['quarters', '4'], ['fifths', '5'], ['sixths', '6'], ['sevenths', '7'], ['eighths', '8'], ['ninths', '9'], ['tenths', '10'], ['hundredths', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIVISER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIVISER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_arrondir'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 round %2 to %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/arrondir.gif',
          'width': 32,
          'height': 32,
          'alt': '[O]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_ARRONDIR_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'GRAD',
          'options': [['decimal places', '1e-'], [' ', '']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_ARRONDIR_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_ARRONDIR_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_tronquer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 truncate %2 to %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/troncature.gif',
          'width': 32,
          'height': 32,
          'alt': '[o]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_TRONQUER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'GRAD',
          'options': [['decimal places', '1e-'], [' ', '']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_TRONQUER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_TRONQUER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};


/*

Blockly.Blocks['sophus_arrondi'] = {
  init: function() {
    this.jsonInit({
  "message0": "round %1 to %2 %3",
  "args0": [
        {
          "type": "field_variable",
          "name": "VAR",
          "variable": Blockly.Msg.SOPHUS_ARRONDI_TITLE_ITEM
        },
    {
      "type": "field_dropdown",
      "name": "GRAD",
      "options": [
        [
          "d√©cimales",
          "1e-"
        ],
        [
          "pr√®s",
          ""
        ]
      ]
    }
  ],
  "inputsInline": true,
  "output": "Number",
      "colour": Blockly.Blocks.math.HUE,
      "helpUrl": Blockly.Msg.SOPHUS_ARRONDI_HELPURL
});
    var thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_ARRONDI_TOOLTIP.replace('%1',
          thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};
 */

Blockly.Blocks['sophus_puissance'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_PUISSANCE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.gif',
          'width': 32,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_PUISSANCE_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'POW',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_PUISSANCE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_PUISSANCE_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_inverser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_inverser',
      'message0': Blockly.Msg.SOPHUS_INVERSER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/inverse.gif',
          'width': 32,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INVERSER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_INVERSER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INVERSER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_incrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_incrementer',
      'message0': Blockly.Msg.SOPHUS_INCREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.gif',
          'width': 32,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INCREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_INCREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INCREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_decrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_decrementer',
      'message0': Blockly.Msg.SOPHUS_DECREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.gif',
          'width': 32,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DECREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DECREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DECREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['big_aff'] = {
  init: function() {
    this.appendValueInput('VAR').appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('print');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(20);
    this.setTooltip('add after the parchment');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['big_efface'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('palimpsest');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(20);
    this.setTooltip('wash off the parchment');
    this.setHelpUrl('https://en.wikipedia.org/wiki/Palimpsest');
  }
};

Blockly.Blocks['tortue_x'] = {
  init: function() {
    this.appendDummyInput().appendField('abscissa of the turtle');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('abscissa of the turtle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_y'] = {
  init: function() {
    this.appendDummyInput().appendField('ordinate of the turtle');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('ordinate of the turtle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_t'] = {
  init: function() {
    this.appendDummyInput().appendField('angle of the turtle');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('angle between the turtle and the X axis');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_c'] = {
  init: function() {
    this.appendDummyInput().appendField('color of the turtle');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('color of the pen');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['avancer'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/avancer.gif', 32, 32, '')).appendField('forward by');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('move the turtle forward');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['reculer'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/reculer.gif', 32, 32, '')).appendField('backward by');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('let the turtle move backward');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_gauche'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/gauche.gif', 32, 32, '')).appendField('to the left by').appendField(new Blockly.FieldAngle(90), 'NAME');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('turn the turtle to its left');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_droite'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droite.gif', 32, 32, '')).appendField('to the right by').appendField(new Blockly.FieldAngle(90), 'NAME');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('turn the turtle to its right');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['var_gauche'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/gauche.gif', 32, 32, '')).appendField('turn to the left by');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('turn to the right by an angle in degrees');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['var_droite'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/droite.gif', 32, 32, '')).appendField('turn to the right by');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('turn to the right by an angle in degrees');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['frac_gauche'] = {
  init: function() {
    this.appendValueInput('NUMER').setCheck('Number').appendField('to the left, by');
    this.appendDummyInput().appendField('/ 6 of a right angle');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('turn to the left from a fraction of a turn');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['frac_droite'] = {
  init: function() {
    this.appendValueInput('NUMER').setCheck('Number').appendField('to the right, by');
    this.appendDummyInput().appendField('/ 6 of a right angle');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('turn to the right from a fraction of a turn');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mettre_angle'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('orient the turtle at');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('impose a direction to the turtle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['teleport'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('teleport the turtle to (').appendField(new Blockly.FieldTextInput('0'), 'X').appendField(',').appendField(new Blockly.FieldTextInput('0'), 'Y').appendField(')');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('teleport without changing angle nor draw a line');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_teleport'] = {
  init: function() {
    this.appendValueInput('ABS').setCheck('Number').appendField('teleport the turtle to (');
    this.appendValueInput('ORD').setCheck('Number').appendField(',');
    this.appendDummyInput().appendField(')');
    this.setInputsInline(true);
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('teleport the turtle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tampon'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('draw a point');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('the turtle draws a little circle where it is');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['teleport_var'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('teleport the turtle to (').appendField(new Blockly.FieldVariable('x'), 'X').appendField(',').appendField(new Blockly.FieldVariable('y'), 'Y').appendField(')');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('place the turtle at a position given by its coordinates');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['cacher_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/ghost.png', 32, 32, '')).appendField('hide turtle');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('from now on the turtle is invisible');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['montrer_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('show turtle');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('from now on the turtle is visible');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['lever_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/penup.gif', 32, 32, '')).appendField('pen up');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('from now on the turtle moves without drawing');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['baisser_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pendown.gif', 32, 32, '')).appendField('pen down');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('from now on the turtle will draw');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['scribe'] = {
  init: function() {
    this.appendValueInput('texte').appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('write');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('the turtle writes a text where it stands');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['couleur_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('pen color:').appendField(new Blockly.FieldColour('#000066'), 'colstyle');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('change the pen color');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['eff_svg'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('erase graphics');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('erase graphics');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['reset'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('initialize graphics');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('initialize the turtle graphics (except the colour)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axeX'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/axeX.gif', 32, 32, '')).appendField('X axis');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('draw the X axis');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axeY'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/axeY.gif', 32, 32, '')).appendField('Y axis');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('draw Y axis');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axes'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/axes.gif', 32, 32, '')).appendField('draw axes');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('draw both axes on the turtle graphics');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['grille'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/grid.gif', 32, 32, '')).appendField('draw grid');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('square grid');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['creer_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Create turtle #').appendField(new Blockly.FieldTextInput('1'), 'N');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Create a turtle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['creer_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Create turtle #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Create a turtle (String)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['choisir_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('With the turtle').appendField(new Blockly.FieldTextInput('1'), 'N');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Choose a turtle');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('do');
  }
};

Blockly.Blocks['choisir_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('With the turtle #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('give instruction to a turtle given by its number');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('do');
  }
};

Blockly.Blocks['distance_avec_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Distance from the turtle #');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('Distance from a turtle given by its number');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tourner_vers_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Turn towards the turtle #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('turn towards a turtle given by its number');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume_suivant'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('next avatar');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('change the look of the turtle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume_pred'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('previous avatar');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('change the look of the turtle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('choose avatar').appendField(new Blockly.FieldDropdown([["origine", "0"], ["gauche", "1"], ["droit", "2"], ["Frenet", "3"], ["m√©tal", "4"], ["classique", "5"]]), "CID");
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('change the look of the turtle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_const'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'x');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('2'), 'y');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('2D vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_3D'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'x');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('2'), 'y');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('1'), 'z');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('3D vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_alea'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('random vector');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('random vector (all coordinates random)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_alea3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('random vector');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('random vector (all coordinates random)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_nul'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('zero vector');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('zero vector (all coordinates null)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_nul3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('zero vector');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('zero vector (all coordinates null)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_aff'] = {
  init: function() {
    this.appendValueInput('vec').appendField(new Blockly.FieldImage('img/arrowhead.png', 32, 32, ''));
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('visibilit√© des matrices');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_eq'] = {
  init: function() {
    this.appendValueInput('autre').setCheck(['Vector', 'Matrix']).appendField(new Blockly.FieldVariable('element'), 'lui').appendField('=');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('equality between matrices');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_add'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('+');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('addition');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_sub'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('-');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('subtraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_dot'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('.');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('dot product');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_angle'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('angle with');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('');
    this.setHelpUrl('vector angle (in radians)');
  }
};

Blockly.Blocks['vec_distance'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('distance from');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('');
    this.setHelpUrl('distance between vectors (considered as points)');
  }
};

Blockly.Blocks['vec_abscisse'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('abscissa of');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('abscissa of the vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_ordonnee'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('ordinate of');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('ordinate of the vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_expr'] = {
  init: function() {
    this.appendDummyInput().appendField("Vector");
    this.appendValueInput("ABS").appendField("x: ");
    this.appendValueInput("ORD").appendField("y: ");
    this.setInputsInline(true);
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('variable vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_expr3D'] = {
  init: function() {
    this.appendDummyInput().appendField("Vector");
    this.appendValueInput("ABS").appendField("x: ");
    this.appendValueInput("ORD").appendField("y: ");
    this.appendValueInput("COT").appendField("z: ");
    this.setInputsInline(true);
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('variable vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_cote'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('applicate of');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('applicate of the vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_colineaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('is collinear to');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('collinearity');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_perpendiculaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('is perpendicular to');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('perpendicularity between vectors');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_fois'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Number').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('√ó');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('product by a number');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_foisbis'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldTextInput('3'), 'facteur').appendField('√ó');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('product number*matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_symmetry'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('symmetric with respect to');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('central symmetry');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_rotation'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('rotated by').appendField(new Blockly.FieldTextInput('3.14'), 'angle').appendField('radians around');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('rotation fixed angle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_norme'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('length of');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('length');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_unitaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('normalize');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('unit vector collinear to this vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['normer_sofus'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('normalize');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('scale this vector to unit');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['inverser_mat'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('invert');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('invert the matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['transposer_mat'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('transpose');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('transpose the matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['arrondir_mat'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('round');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('round the coefficients of the matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mult_sofus_mat'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('multiply');
    this.appendValueInput('vec').setCheck(null).appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('multiply the matrix by a matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mult_gauche'] = {
  init: function() {
    this.appendValueInput('vec').setCheck(null).appendField('multiply');
    this.appendValueInput('matr').setCheck('Matrix').appendField('on the left by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('multiply the matrix by a matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_multiplier'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Vector').appendField('multiply');
    this.appendValueInput('vec').setCheck(null).appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('multiply the vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_augmenter'] = {
  init: function() {
    this.appendValueInput('matr').setCheck(null).appendField('augment');
    this.appendValueInput('vec').setCheck(null).appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('add a matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_diminuer'] = {
  init: function() {
    this.appendValueInput('matr').setCheck(null).appendField('diminish');
    this.appendValueInput('vec').setCheck(null).appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('subtract a matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['sofus_scalaire'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Vector').appendField('dot multiply');
    this.appendValueInput('vec').setCheck('Vector').appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('dot product');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_diagonal'] = {
  init: function() {
    this.appendValueInput('vecteur').setCheck('Vector').appendField('diagonal');
    this.setOutput(true, 'Matrix');
    this.setColour(20);
    this.setTooltip('diagonal matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_matrice'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('3'), 'a11').appendField(new Blockly.FieldTextInput('-2'), 'a12');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('1'), 'a21').appendField(new Blockly.FieldTextInput('5'), 'a22');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrix 2 by 2');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_3D'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('8'), 'a11').appendField(new Blockly.FieldTextInput('1'), 'a12').appendField(new Blockly.FieldTextInput('6'), 'a13');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('3'), 'a21').appendField(new Blockly.FieldTextInput('5'), 'a22').appendField(new Blockly.FieldTextInput('7'), 'a23');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('4'), 'a31').appendField(new Blockly.FieldTextInput('9'), 'a32').appendField(new Blockly.FieldTextInput('2'), 'a33');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrix 3 by 3');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_col'] = {
  init: function() {
    this.appendDummyInput().appendField("columns");
    this.appendValueInput("C1");
    this.appendValueInput("C2");
    this.setInputsInline(true);
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    return this.setTooltip('matrix defined by its columns');
  }
};

Blockly.Blocks['mat3D_col'] = {
  init: function() {
    this.appendDummyInput().appendField("columns");
    this.appendValueInput("C1");
    this.appendValueInput("C2");
    this.appendValueInput("C3");
    this.setInputsInline(true);
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    return this.setTooltip('matrix by its columns');
  }
};

Blockly.Blocks['mat_diag'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'a11').appendField('0');
    this.appendDummyInput().appendField('0').appendField(new Blockly.FieldTextInput('2'), 'a22');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('diagonal matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_id'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('1').appendField('0');
    this.appendDummyInput().appendField('0').appendField('1');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('identity matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_id3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('1').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('1').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('1');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('identity matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_alea'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldImage('img/die.png', 32, 32, 'X'));
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('random matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_alea3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldImage('img/die.png', 32, 32, 'X'));
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('random matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_nulle'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice nulle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_nulle3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('0').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('0');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('zero matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_rotation'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('rotation  of angle').appendField(new Blockly.FieldAngle(45), 'angle');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('rotation matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne1'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('first column of');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('the first column of a matrix is a vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne2'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('second column of');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('the second column of a matrix is a vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne3'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('third column of');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('the third column of a matrix is a vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_diagonal'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('diagonal of');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('the diagonal of the matrix is a vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_det'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('determinant of');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('determinant');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_inv'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('inverse of');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('inverse');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_mult'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldVariable('matrice'), 'lui').appendField('√ó');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('product of two matrices or of a matrix by a vector');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_arrondi'] = {
  init: function() {
    this.appendValueInput('autre').appendField('rounded of');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('rounded');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_trace'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Matrix').appendField('trace of');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('trace of the matrix');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_transpose'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Matrix').appendField('transposed of');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('transpose');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['repeter_doucement'] = {
  init: function() {
    this.appendValueInput('TIMES').setCheck('Number').appendField('Repeat slowly');
    this.appendDummyInput().appendField('times');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Repeater every 500ms');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('do');
  }
};

Blockly.Blocks['lentement'] = {
  init: function() {
    this.appendDummyInput().appendField('very slowly');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('slow down the turtle(s)');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('do');
  }
};

Blockly.Blocks['octet'] = {
  init: function() {
    this.appendDummyInput().appendField('byte ').appendField(new Blockly.FieldCheckbox("FALSE"), "O7").appendField(new Blockly.FieldCheckbox("FALSE"), "O6").appendField(new Blockly.FieldCheckbox("TRUE"), "O5").appendField(new Blockly.FieldCheckbox("FALSE"), "O4").appendField(new Blockly.FieldCheckbox("TRUE"), "O3").appendField(new Blockly.FieldCheckbox("FALSE"), "O2").appendField(new Blockly.FieldCheckbox("TRUE"), "O1").appendField(new Blockly.FieldCheckbox("FALSE"), "O0");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('binary representation of an integer between 0 and 255');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['binaire'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("binary");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('only 0 and 1 as decimal digits to represent a binary number with decimal notation');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['envers'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("the reverse of");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('the reverse of a number, after Smullyan');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['srevne'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("the reverse of");
    this.setOutput(true, null);
    this.setColour(160);
    this.setTooltip('the reverse of a number, see Smullyan');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['kaprekar_doubler'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("the repeat of");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('duplicate the digits');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['cconcatener'] = {
  init: function() {
    this.appendValueInput("A").setCheck(null).appendField("the concantenate of");
    this.appendValueInput("B").setCheck(null).appendField("and");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('concatenate the digits');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['kaprekar_ranger'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("the sorted digits of");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('sort the digits in ascending order');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['remplacer'] = {
  init: function() {
    this.appendDummyInput().appendField("replace all the");
    this.appendValueInput("C1").setCheck(null);
    this.appendDummyInput().appendField("by");
    this.appendValueInput("C2").setCheck(null);
    this.appendDummyInput().appendField("in");
    this.appendValueInput("T").setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('substitution');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['remplacer1'] = {
  init: function() {
    this.appendDummyInput().appendField("replace the first");
    this.appendValueInput("C1").setCheck(null);
    this.appendDummyInput().appendField("by");
    this.appendValueInput("C2").setCheck(null);
    this.appendDummyInput().appendField("in");
    this.appendValueInput("T").setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('substitution');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['eval'] = {
  init: function() {
    this.appendValueInput("P").setCheck(null).appendField("JS");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(270);
    this.setTooltip('JavaScript');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['eval0'] = {
  init: function() {
    this.appendValueInput("P").setCheck(null).appendField("JS");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(270);
    this.setTooltip('JavaScript');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['coffee'] = {
  init: function() {
    this.appendValueInput("P").setCheck(null).appendField("CS");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(270);
    this.setTooltip('CoffeeScript');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['coffee0'] = {
  init: function() {
    this.appendValueInput("P").setCheck(null).appendField(new Blockly.FieldImage('img/coffee.png', 32, 32, 'X'));
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(270);
    this.setTooltip('CoffeeScript');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['inverser_frac'] = {
  init: function() {
    this.appendValueInput('frac').setCheck('Fraction').appendField('invert');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('invert the fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['augmenter_frac'] = {
  init: function() {
    this.appendValueInput('frac1').setCheck('Fraction').appendField('augment');
    this.appendValueInput('frac2').setCheck('Fraction').appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('add a fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['diminuer_frac'] = {
  init: function() {
    this.appendValueInput('frac1').setCheck('Fraction').appendField('diminish');
    this.appendValueInput('frac2').setCheck('Fraction').appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('subtract a fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['multiplier_frac'] = {
  init: function() {
    this.appendValueInput('frac1').setCheck('Fraction').appendField('multiply');
    this.appendValueInput('frac2').setCheck('Fraction').appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('multiply by a fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['diviser_frac'] = {
  init: function() {
    this.appendValueInput('frac1').setCheck('Fraction').appendField('divide');
    this.appendValueInput('frac2').setCheck('Fraction').appendField('by');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('divide by a fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['pgcd'] = {
  init: function() {
    this.appendValueInput("A").setCheck(null).appendField("gcd of");
    this.appendValueInput("B").setCheck(null).appendField("and");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(230);
    this.setTooltip('greatest common divisor');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['doubler_frac'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldDropdown([["double", "2"], ["triple", "3"], ["quadruple", "4"], ["quintuple", "5"], ["sextuple", "6"], ["octupler", "8"], ["decuple", "10"], ["centuple", "100"]]), "CHOIX");
    this.appendValueInput("VAR").setCheck("Fraction");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('multiply the fraction by a whole number entier');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['doubler_vec'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldDropdown([["double", "2"], ["triple", "3"], ["quadruple", "4"], ["quintuple", "5"], ["sextuple", "6"], ["octupler", "8"], ["decuple", "10"], ["centuple", "100"]]), "CHOIX");
    this.appendValueInput("VAR");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(30);
    this.setTooltip('multiply the matrix by an integer');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['humain'] = {
  init: function() {
    this.appendDummyInput().appendField("a").appendField(new Blockly.FieldImage('img/man.png', 32, 32, "human"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('in Transylvania humans always tell the truth');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vampire'] = {
  init: function() {
    this.appendDummyInput().appendField("a").appendField(new Blockly.FieldImage('img/vampire.png', 32, 32, "vampire"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('vampires always lie. Always ...');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['sain'] = {
  init: function() {
    this.appendDummyInput().appendField("a").appendField(new Blockly.FieldImage('img/healthy.png', 32, 32, "healthy"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('whatever a healthy transylvanian believes is true');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['fou'] = {
  init: function() {
    this.appendDummyInput().appendField("a").appendField(new Blockly.FieldImage('img/crazy.png', 32, 32, "mad"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('whatever a mad transylvanian believes is false');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['patient'] = {
  init: function() {
    this.appendDummyInput().appendField("a").appendField(new Blockly.FieldImage('img/sick.png', 32, 32, "patient"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('is every patient really mad in this asylum?');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['docteur'] = {
  init: function() {
    this.appendDummyInput().appendField("a").appendField(new Blockly.FieldImage('img/medical.png', 32, 32, "doctor"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('A doctor, but is he mentally healthy?');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['transyl_etat'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldVariable("transylvanian"), "NAME").appendField("is").appendField(new Blockly.FieldDropdown([["human", "moi.humain"], ["vampire", "!moi.humain"], ["healthy", "moi.sain"], ["mad", "!moi.sain"], ["a patient", "!moi.docteur"], ["a doctor", "moi.docteur"]]), "etat");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour(330);
    this.setTooltip('the actual state of a transylvanian');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['devenir'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldVariable("transylvanian"), "NAME").appendField("becomes").appendField(new Blockly.FieldDropdown([["human", ".humain = true"], ["vampire", ".humain = false"], ["healthy", ".sain = true"], ["mad", ".sain = false"], ["a patient", ".docteur = false"], ["a doctor", ".docteur = true"]]), "etat");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(330);
    this.setTooltip('evolution of the transylvanians');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['dire'] = {
  init: function() {
    this.appendValueInput("NAME").setCheck("Boolean").appendField(new Blockly.FieldVariable("transylvanian"), "NAME").appendField("says that");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour(330);
    this.setTooltip('affirmation');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['croire'] = {
  init: function() {
    this.appendValueInput("NAME").setCheck("Boolean").appendField(new Blockly.FieldVariable("transylvanian"), "NAME").appendField("believes that");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour(330);
    this.setTooltip('belief');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['transyl_affectation'] = {
  init: function() {
    this.appendValueInput("NAME").setCheck("Boolean").appendField("set").appendField(new Blockly.FieldDropdown([["the human nature", ".humain = "], ["the mental health", ".sain = "], ["the profession", ".docteur = "]]), "PROP").appendField("of").appendField(new Blockly.FieldVariable("transylvanian"), "NAME").appendField("to");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(330);
    this.setTooltip('set properties');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['developper'] = {
  init: function() {
    this.appendDummyInput().appendField("expand").appendField(new Blockly.FieldVariable("expression"), "EXPR");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('expand an expression');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['simplifier'] = {
  init: function() {
    this.appendDummyInput().appendField("simplify").appendField(new Blockly.FieldVariable("expression"), "EXPR");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('simplify an expression');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['deriver'] = {
  init: function() {
    this.appendDummyInput().appendField("differentiate").appendField(new Blockly.FieldVariable("expression"), "EXPR");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('differentiate an expression with respect to its variable');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['solutions'] = {
  init: function() {
    this.appendValueInput("EQU").setCheck(null).appendField("solutions of");
    this.setOutput(true, null);
    this.setColour(150);
    this.setTooltip('solve an equation');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['embelli'] = {
  init: function() {
    this.appendValueInput("EQU").setCheck(null).appendField("prettified of");
    this.setOutput(true, null);
    this.setColour(150);
    this.setTooltip('write better');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['CAS_carre'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_CARRE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.gif',
          'width': 32,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_CARRE_TITLE_ITEM
        }, {
          'type': 'field_dropdown',
          'name': 'POW',
          'options': [['to the square', '2'], ['to the third power', '3'], ['to the fourth power', '4']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_CARRE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_CARRE_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_doubler'] = {
  init: function() {
    var dropdown, variable;
    dropdown = new Blockly.FieldDropdown([['double', '2'], ['triple', '3'], ['quadruple', '4'], ['quintuple', '5'], ['sextuple', '6'], ['decuple', '10'], ['centuple', '100']]);
    variable = new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME);
    this.appendDummyInput().appendField(new Blockly.FieldImage('./img/multiplier.gif', 64, 32, '[*]:   ')).appendField(dropdown, 'CHOIX').appendField('').appendField(variable, 'VAR');
    this.setHelpUrl('');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(165);
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_puissance'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_PUISSANCE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.gif',
          'width': 32,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_PUISSANCE_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'POW',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_PUISSANCE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_PUISSANCE_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_inverser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_inverser',
      'message0': Blockly.Msg.SOPHUS_INVERSER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/inverse.gif',
          'width': 32,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INVERSER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_INVERSER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INVERSER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_augmenter_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 augment %2 by %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.gif',
          'width': 32,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['percents', '100'], ['halves', '2'], ['thirds', '3'], ['quarters', '4'], ['fifths', '5'], ['sixths', '6'], ['sevenths', '7'], ['eighths', '8'], ['ninths', '9'], ['tenths', '10'], ['hundredths', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_diminuer_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 dimish %2 by %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.gif',
          'width': 32,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['percents', '100'], ['halves', '2'], ['thirds', '3'], ['quarters', '4'], ['fifths', '5'], ['sixths', '6'], ['sevenths', '7'], ['eighths', '8'], ['ninths', '9'], ['tenths', '10'], ['hundredths', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_multiplier_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 multiply %2 by %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.gif',
          'width': 32,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['percents', '100'], ['halves', '2'], ['thirds', '3'], ['quarters', '4'], ['fifths', '5'], ['sixths', '6'], ['sevenths', '7'], ['eighths', '8'], ['ninths', '9'], ['tenths', '10'], ['hundredths', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_diviser_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 divide %2 by %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.gif',
          'width': 32,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['percents', '100'], ['halves', '2'], ['thirds', '3'], ['quarters', '4'], ['fifths', '5'], ['sixths', '6'], ['sevenths', '7'], ['eighths', '8'], ['ninths', '9'], ['tenths', '10'], ['hundredths', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_DIVISER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIVISER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_augmenter'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_AUGMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.gif',
          'width': 32,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_diminuer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIMINUER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.gif',
          'width': 32,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_multiplier'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.gif',
          'width': 32,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_diviser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIVISER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.gif',
          'width': 32,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_incrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'CAS_incrementer',
      'message0': Blockly.Msg.SOPHUS_INCREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.gif',
          'width': 32,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INCREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_INCREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INCREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_decrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'CAS_decrementer',
      'message0': Blockly.Msg.SOPHUS_DECREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.gif',
          'width': 32,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DECREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_DECREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DECREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['texte_doubler'] = {
  init: function() {
    var dropdown, variable;
    dropdown = new Blockly.FieldDropdown([['double', '2'], ['triple', '3'], ['quadruple', '4'], ['quintuple', '5'], ['sextuple', '6'], ['decuple', '10'], ['centuple', '100']]);
    variable = new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME);
    this.appendDummyInput().appendField(new Blockly.FieldImage('./img/multiplier.gif', 64, 32, '[*]:   ')).appendField(dropdown, 'CHOIX').appendField('le texte').appendField(variable, 'VAR');
    this.setHelpUrl('');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(165);
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['texte_compter'] = {
  init: function() {
    this.appendValueInput("Lettre").setCheck(null).appendField("number of");
    this.appendValueInput("Mot").setCheck(null).appendField("in");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(165);
    this.setTooltip('count the letters in a word');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['lambda_js'] = {
  init: function() {
    this.appendValueInput("var").setCheck(null);
    this.appendValueInput("fonc").setCheck(null).appendField("‚üº");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(300);
    this.setTooltip('anonymus function');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['lambda1'] = {
  init: function() {
    this.appendValueInput("variables").setCheck(null).appendField("Œª");
    this.appendDummyInput().appendField(".").appendField(new Blockly.FieldVariable("element"), "fonctions");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(270);
    this.setTooltip('anonymous function');
    this.setHelpUrl('');
  }
};
