// Generated by CoffeeScript 1.11.1
var reverseT;

reverseT = function(s) {
  var i, ref, ss, t;
  ss = '';
  for (t = i = ref = s.length - 1; i >= 0; t = i += -1) {
    ss += s.charAt(t);
  }
  return ss;
};

Blockly.JavaScript['sophus_angle'] = function(block) {
  return [block.getFieldValue('NAME'), Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['sophus_carre'] = function(block) {
  var dropdown_pow, varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  dropdown_pow = block.getFieldValue('POW');
  return varName + ' = Math.pow(' + varName + ',' + dropdown_pow + ');\n';
};

Blockly.JavaScript['sophus_doubler'] = function(block) {
  var choix, varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  choix = block.getFieldValue('CHOIX');
  return varName + ' = ' + varName + ' * ' + choix + ';\n';
};

Blockly.JavaScript['sophus_augmenter'] = function(block) {
  var argument0, varName;
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' = ' + varName + ' + ' + argument0 + ';\n';
};

Blockly.JavaScript['sophus_diminuer'] = function(block) {
  var argument0, varName;
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' = ' + varName + ' - ' + argument0 + ';\n';
};

Blockly.JavaScript['sophus_augmenter_fract'] = function(block) {
  var argument0, dropdown_denom, varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  dropdown_denom = block.getFieldValue('DENOM');
  return varName + ' = ' + varName + ' + ' + varName + ' * ' + argument0 + ' / ' + dropdown_denom + ';\n';
};

Blockly.JavaScript['sophus_augmenter_pct'] = function(block) {
  var argument0, varName;
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' = ' + varName + ' * (1 + ' + argument0 + ' / 100)' + ';\n';
};

Blockly.JavaScript['sophus_diminuer_fract'] = function(block) {
  var argument0, dropdown_denom, varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  dropdown_denom = block.getFieldValue('DENOM');
  return varName + ' = ' + varName + ' - ' + varName + ' * ' + argument0 + ' / ' + dropdown_denom + ';\n';
};

Blockly.JavaScript['sophus_diminuer_pct'] = function(block) {
  var argument0, varName;
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' = ' + varName + ' * (1 - ' + argument0 + ' / 100)' + ';\n';
};

Blockly.JavaScript['controls_for'] = function(block) {
  var up;
  var argument0, argument1, branch, code, increment, step, up, variable0;
  variable0 = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  argument0 = Blockly.JavaScript.valueToCode(block, 'FROM', Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';
  argument1 = Blockly.JavaScript.valueToCode(block, 'TO', Blockly.JavaScript.ORDER_ASSIGNMENT) || '0';
  increment = Blockly.JavaScript.valueToCode(block, 'BY', Blockly.JavaScript.ORDER_ASSIGNMENT) || '1';
  branch = Blockly.JavaScript.statementToCode(block, 'DO');
  branch = Blockly.JavaScript.addLoopTrap(branch, block.id);
  if (Blockly.isNumber(increment)) {
    up = parseFloat(increment) >= 0;
    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;
    step = Math.abs(parseFloat(increment));
    if (step === 1) {
      code += up ? '++' : '--';
    } else {
      code += (up ? ' += ' : ' -= ') + step;
    }
    code += ') {\n' + branch + '}\n';
  } else {
    up = true;
    code = 'for (' + variable0 + ' = ' + argument0 + '; ' + variable0 + (up ? ' <= ' : ' >= ') + argument1 + '; ' + variable0;
    code += (up ? ' += ' : ' -= ') + increment;
    code += ') {\n' + branch + '}\n';
  }
  return code;
};

Blockly.JavaScript['sophus_multiplier'] = function(block) {
  var argument0, varName;
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' = ' + varName + ' * ' + argument0 + ';\n';
};

Blockly.JavaScript['sophus_diviser'] = function(block) {
  var argument0, varName;
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' = ' + varName + ' / ' + argument0 + ';\n';
};

Blockly.JavaScript['sophus_multiplier_fract'] = function(block) {
  var argument0, dropdown_denom, varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  dropdown_denom = block.getFieldValue('DENOM');
  return varName + ' = ' + varName + ' * ' + argument0 + ' / ' + dropdown_denom + ';\n';
};

Blockly.JavaScript['sophus_diviser_fract'] = function(block) {
  var argument0, dropdown_denom, varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  dropdown_denom = block.getFieldValue('DENOM');
  return varName + ' = ' + varName + ' * ' + dropdown_denom + ' / ' + argument0 + ';\n';
};

Blockly.JavaScript['sophus_arrondir'] = function(block) {
  var argument0, dropdown_grad, varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  dropdown_grad = block.getFieldValue('GRAD');
  return varName + ' = Math.round(' + varName + ' / ' + dropdown_grad + argument0 + ') * ' + dropdown_grad + argument0 + ';\n';
};

Blockly.JavaScript['sophus_tronquer'] = function(block) {
  var argument0, dropdown_grad, varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  argument0 = Blockly.JavaScript.valueToCode(block, 'DELTA', Blockly.JavaScript.ORDER_ADDITION) || '0';
  dropdown_grad = block.getFieldValue('GRAD');
  return varName + ' = Math.floor(' + varName + ' / ' + dropdown_grad + argument0 + ') * ' + dropdown_grad + argument0 + ';\n';
};

Blockly.JavaScript['sophus_puissance'] = function(block) {
  var argument0, varName;
  argument0 = Blockly.JavaScript.valueToCode(block, 'POW', Blockly.JavaScript.ORDER_ADDITION) || '0';
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' = Math.pow(' + varName + ' , ' + argument0 + ');\n';
};

Blockly.JavaScript['sophus_inverser'] = function(block) {
  var varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' = ' + ' 1 / ' + varName + ';\n';
};

Blockly.JavaScript['sophus_incrementer'] = function(block) {
  var varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' += 1 ;\n';
};

Blockly.JavaScript['sophus_decrementer'] = function(block) {
  var varName;
  varName = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('VAR'), Blockly.Variables.NAME_TYPE);
  return varName + ' -= 1 ;\n';
};

Blockly.JavaScript['big_aff'] = function(block) {
  var code, value_var;
  value_var = Blockly.JavaScript.valueToCode(block, 'VAR', Blockly.JavaScript.ORDER_ATOMIC);
  return code = 'document.getElementById("sortieNum").value += "\\n" + ' + value_var + ';\n';
};

Blockly.JavaScript['big_efface'] = function(block) {
  var code;
  return code = 'document.getElementById("sortieNum").value = "";\n';
};

Blockly.JavaScript['tortue_x'] = function(block) {
  var code;
  code = 'totos[toto].x-320';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['tortue_y'] = function(block) {
  var code;
  code = '240-totos[toto].y';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['tortue_t'] = function(block) {
  var code;
  code = '-totos[toto].t/Math.PI*180';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['tortue_c'] = function(block) {
  var code;
  code = 'totos[toto].c';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['avancer'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  return code = "totos[toto].av(" + value_name + ");\n";
};

Blockly.JavaScript['reculer'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  return code = 'totos[toto].re(' + value_name + ');\n';
};

Blockly.JavaScript['tortue_gauche'] = function(block) {
  var angle_name, code;
  angle_name = block.getFieldValue('NAME');
  return code = 'totos[toto].tg(' + angle_name + ');\n';
};

Blockly.JavaScript['tortue_droite'] = function(block) {
  var angle_name, code;
  angle_name = block.getFieldValue('NAME');
  return code = 'totos[toto].td(' + angle_name + ');\n';
};

Blockly.JavaScript['var_gauche'] = function(block) {
  var code, value_angle;
  value_angle = Blockly.JavaScript.valueToCode(block, 'ANGLE', Blockly.JavaScript.ORDER_ATOMIC);
  return code = 'totos[toto].tg(' + value_angle + ');\n';
};

Blockly.JavaScript['var_droite'] = function(block) {
  var code, value_angle;
  value_angle = Blockly.JavaScript.valueToCode(block, 'ANGLE', Blockly.JavaScript.ORDER_ATOMIC);
  return code = 'totos[toto].td(' + value_angle + ');\n';
};

Blockly.JavaScript['frac_gauche'] = function(block) {
  var code, value_numer;
  value_numer = Blockly.JavaScript.valueToCode(block, 'NUMER', Blockly.JavaScript.ORDER_ATOMIC);
  return code = 'totos[toto].tg(' + value_numer + '*15' + ');\n';
};

Blockly.JavaScript['frac_droite'] = function(block) {
  var code, value_numer;
  value_numer = Blockly.JavaScript.valueToCode(block, 'NUMER', Blockly.JavaScript.ORDER_ATOMIC);
  return code = 'totos[toto].td(' + value_numer + '*15' + ');\n';
};

Blockly.JavaScript['mettre_angle'] = function(block) {
  var code, value_angle;
  value_angle = Blockly.JavaScript.valueToCode(block, 'ANGLE', Blockly.JavaScript.ORDER_ATOMIC);
  return code = 'totos[toto].orient(' + value_angle + ');\n';
};

Blockly.JavaScript['teleport'] = function(block) {
  var code, text_x, text_y;
  text_x = block.getFieldValue('X');
  text_y = block.getFieldValue('Y');
  return code = 'totos[toto].teleport(' + text_x + '+320,240-(' + text_y + '));\n';
};

Blockly.JavaScript['tortue_teleport'] = function(block) {
  var code, value_abs, value_ord;
  value_abs = Blockly.JavaScript.valueToCode(block, 'ABS', Blockly.JavaScript.ORDER_ATOMIC);
  value_ord = Blockly.JavaScript.valueToCode(block, 'ORD', Blockly.JavaScript.ORDER_ATOMIC);
  code = 'totos[toto].teleport(' + value_abs + '+320' + ',240-(' + value_ord + '));\n';
  return code;
};

Blockly.JavaScript['teleport_var'] = function(block) {
  var code, variable_x, variable_y;
  variable_x = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('X'), Blockly.Variables.NAME_TYPE);
  variable_y = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('Y'), Blockly.Variables.NAME_TYPE);
  return code = 'totos[toto].teleport(' + variable_x + '+320' + ',240-(' + variable_y + '));\n';
};

Blockly.JavaScript['cacher_tortue'] = function(block) {
  var code;
  return code = 'totos[toto].hide();\n';
};

Blockly.JavaScript['montrer_tortue'] = function(block) {
  var code;
  return code = 'totos[toto].show();\n';
};

Blockly.JavaScript['lever_stylo'] = function(block) {
  var code;
  return code = 'totos[toto].penup();\n';
};

Blockly.JavaScript['baisser_stylo'] = function(block) {
  var code;
  return code = 'totos[toto].pendown();\n';
};

Blockly.JavaScript['scribe'] = function(block) {
  var code, value_texte;
  value_texte = Blockly.JavaScript.valueToCode(block, 'texte', Blockly.JavaScript.ORDER_ATOMIC);
  return code = "totos[toto].write(" + value_texte + ");\n";
};

Blockly.JavaScript['tampon'] = function(block) {
  var code;
  return code = 'totos[toto].cercle();\n';
};

Blockly.JavaScript['couleur_stylo'] = function(block) {
  var code, colour_colstyle;
  colour_colstyle = block.getFieldValue('colstyle');
  return code = "totos[toto].c = '" + colour_colstyle + "';\n";
};

Blockly.JavaScript['eff_svg'] = function(block) {
  var code;
  return code = 'effaceDessin();\n';
};

Blockly.JavaScript['reset'] = function(block) {
  var code;
  return code = 'effaceDessin(); toto = 1; ' + 'totos[toto].t = 0;' + 'totos[toto].teleport(320,240);\n';
};

Blockly.JavaScript['axeX'] = function(block) {
  var code;
  return code = 'axeX();\n';
};

Blockly.JavaScript['axeY'] = function(block) {
  var code;
  return code = 'axeY();\n';
};

Blockly.JavaScript['axes'] = function(block) {
  var code;
  return code = 'axes();\n';
};

Blockly.JavaScript['grille'] = function(block) {
  var code;
  return code = 'grille();\n';
};

Blockly.JavaScript['creer_tortue'] = function(block) {
  var code, text_n;
  text_n = block.getFieldValue('N');
  return code = "totos['" + text_n + "'] = new Tortue(" + value_name + ");\nconsole.log(totos);\n";
};

Blockly.JavaScript['creer_tortue_var'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  return code = "totos[" + value_name + "] = new Tortue(" + value_name + ");\nconsole.log('Après création dune tortue, voici les totos:',totos);\n";
};

Blockly.JavaScript['choisir_tortue'] = function(block) {
  var code, statements, text_n;
  text_n = block.getFieldValue('N');
  statements = Blockly.JavaScript.statementToCode(block, 'DO');
  return code = "toto = " + text_n + ";\n" + statements;
};

Blockly.JavaScript['choisir_tortue_var'] = function(block) {
  var code, statements, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  statements = Blockly.JavaScript.statementToCode(block, 'DO');
  return code = "toto = " + value_name + ";\n" + statements;
};

Blockly.JavaScript['distance_avec_tortue_var'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  code = "totos[toto].distance(totos[" + value_name + "])";
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['tourner_vers_tortue_var'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  return code = 'totos[toto].azimuth(totos[' + value_name + ']);\n';
};

Blockly.JavaScript['costume_suivant'] = function(block) {
  var code;
  return code = 'totos[toto].costume_suivant();\n';
};

Blockly.JavaScript['costume_pred'] = function(block) {
  var code;
  return code = 'totos[toto].costume_pred();\n';
};

Blockly.JavaScript['costume'] = function(block) {
  var code, dropdown_cid;
  dropdown_cid = block.getFieldValue('CID');
  return code = 'totos[toto].avatar(' + dropdown_cid + ');\n';
};

Blockly.JavaScript['vec_const'] = function(block) {
  var code, text_x, text_y;
  text_x = block.getFieldValue('x');
  text_y = block.getFieldValue('y');
  code = 'Vector.create([' + text_x + ',' + text_y + '])';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_expr'] = function(block) {
  var code, text_x, text_y;
  text_x = Blockly.JavaScript.valueToCode(block, 'ABS', Blockly.JavaScript.ORDER_ATOMIC);
  text_y = Blockly.JavaScript.valueToCode(block, 'ORD', Blockly.JavaScript.ORDER_ATOMIC);
  code = 'Vector.create([' + text_x + ',' + text_y + '])';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_expr3D'] = function(block) {
  var code, text_x, text_y, text_z;
  text_x = Blockly.JavaScript.valueToCode(block, 'ABS', Blockly.JavaScript.ORDER_ATOMIC);
  text_y = Blockly.JavaScript.valueToCode(block, 'ORD', Blockly.JavaScript.ORDER_ATOMIC);
  text_z = Blockly.JavaScript.valueToCode(block, 'COT', Blockly.JavaScript.ORDER_ATOMIC);
  code = 'Vector.create([' + text_x + ',' + text_y + ',' + text_z + '])';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_3D'] = function(block) {
  var code, text_x, text_y, text_z;
  text_x = block.getFieldValue('x');
  text_y = block.getFieldValue('y');
  text_z = block.getFieldValue('z');
  code = 'Vector.create([' + text_x + ',' + text_y + ',' + text_z + '])';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_alea'] = function(block) {
  var code;
  code = 'Vector.Random(2)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_alea3'] = function(block) {
  var code;
  code = 'Vector.Random(3)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_nul'] = function(block) {
  var code;
  code = 'Vector.Zero(2)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_nul3'] = function(block) {
  var code;
  code = 'Vector.Zero(3)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_aff'] = function(block) {
  var code, value_vec;
  value_vec = Blockly.JavaScript.valueToCode(block, 'vec', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_vec + '.inspect()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_eq'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.eql(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_add'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.add(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_sub'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.subtract(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_dot'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.dot(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_angle'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.angleFrom(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_distance'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.distanceFrom(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_abscisse'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.e(1)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_ordonnee'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.e(2)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_cote'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.e(3)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_colineaire'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = '(' + variable_lui + '.isAntiparallelTo(' + value_autre + ')) || (' + variable_lui + '.isParallelTo(' + value_autre + '))';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_perpendiculaire'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.isPerpendicularTo(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_fois'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.multiply(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_foisbis'] = function(block) {
  var code, text_facteur, value_autre;
  text_facteur = block.getFieldValue('facteur');
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.multiply(' + text_facteur + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_symmetry'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.reflectionIn(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_rotation'] = function(block) {
  var code, text_angle, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  text_angle = block.getFieldValue('angle');
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.rotate(' + text_angle + ',' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_norme'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.modulus()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['vec_unitaire'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.toUnitVector()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['normer_sofus'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + ' = ' + value_autre + '.toUnitVector();\n';
  return code;
};

Blockly.JavaScript['vec_diagonal'] = function(block) {
  var code, value_vecteur;
  value_vecteur = Blockly.JavaScript.valueToCode(block, 'vecteur', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_vecteur + '.toDiagonalMatrix()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_matrice'] = function(block) {
  var code, text_a11, text_a12, text_a21, text_a22;
  text_a11 = block.getFieldValue('a11');
  text_a12 = block.getFieldValue('a12');
  text_a21 = block.getFieldValue('a21');
  text_a22 = block.getFieldValue('a22');
  code = 'Matrix.create([[' + text_a11 + ',' + text_a12 + '],[' + text_a21 + ',' + text_a22 + ']])';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_col'] = function(block) {
  var code, value_c1, value_c2;
  value_c1 = Blockly.JavaScript.valueToCode(block, 'C1', Blockly.JavaScript.ORDER_NONE);
  value_c2 = Blockly.JavaScript.valueToCode(block, 'C2', Blockly.JavaScript.ORDER_NONE);
  code = 'Matrix.create(' + value_c1 + ').augment(' + value_c2 + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat3D_col'] = function(block) {
  var code, value_c1, value_c2, value_c3;
  value_c1 = Blockly.JavaScript.valueToCode(block, 'C1', Blockly.JavaScript.ORDER_NONE);
  value_c2 = Blockly.JavaScript.valueToCode(block, 'C2', Blockly.JavaScript.ORDER_NONE);
  value_c3 = Blockly.JavaScript.valueToCode(block, 'C3', Blockly.JavaScript.ORDER_NONE);
  code = 'Matrix.create(' + value_c1 + ').augment(' + value_c2 + ').augment(' + value_c3 + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_3D'] = function(block) {
  var code, text_a11, text_a12, text_a13, text_a21, text_a22, text_a23, text_a31, text_a32, text_a33;
  text_a11 = block.getFieldValue('a11');
  text_a12 = block.getFieldValue('a12');
  text_a13 = block.getFieldValue('a13');
  text_a21 = block.getFieldValue('a21');
  text_a22 = block.getFieldValue('a22');
  text_a23 = block.getFieldValue('a23');
  text_a31 = block.getFieldValue('a31');
  text_a32 = block.getFieldValue('a32');
  text_a33 = block.getFieldValue('a33');
  code = 'Matrix.create([[' + text_a11 + ',' + text_a12 + ',' + text_a13 + '],[' + text_a21 + ',' + text_a22 + ',' + text_a23 + '],[' + text_a31 + ',' + text_a32 + ',' + text_a33 + ']])';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_diag'] = function(block) {
  var code, text_a11, text_a22;
  text_a11 = block.getFieldValue('a11');
  text_a22 = block.getFieldValue('a22');
  code = 'Matrix.Diagonal([' + text_a11 + ',' + text_a22 + '])';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_id'] = function(block) {
  var code;
  code = 'Matrix.I(2)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_id3'] = function(block) {
  var code;
  code = 'Matrix.I(3)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_alea'] = function(block) {
  var code;
  code = 'Matrix.Random(2,2)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_alea3'] = function(block) {
  var code;
  code = 'Matrix.Random(3,3)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_nulle'] = function(block) {
  var code;
  code = 'Matrix.Zero(2,2)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_nulle3'] = function(block) {
  var code;
  code = 'Matrix.Zero(3,3)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_rotation'] = function(block) {
  var angle_angle, code;
  angle_angle = block.getFieldValue('angle');
  code = 'Matrix.Rotation(Math.PI*' + angle_angle + '/180)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_colonne1'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_name + '.col(1)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_colonne2'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_name + '.col(2)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_colonne3'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_name + '.col(3)';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_diagonal'] = function(block) {
  var code, value_name;
  value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_name + '.diagonal()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_det'] = function(block) {
  var code, value_matr;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + '.determinant()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_inv'] = function(block) {
  var code, value_matr;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + '.inverse()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['inverser_mat'] = function(block) {
  var code, value_matr;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + " = " + value_matr + '.inverse();\n';
  return code;
};

Blockly.JavaScript['transposer_mat'] = function(block) {
  var code, value_matr;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + " = " + value_matr + '.transpose();\n';
  return code;
};

Blockly.JavaScript['arrondir_mat'] = function(block) {
  var code, value_matr;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + " = " + value_matr + '.round();\n';
  return code;
};

Blockly.JavaScript['mult_sofus_mat'] = function(block) {
  var code, value_matr, value_vec;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  value_vec = Blockly.JavaScript.valueToCode(block, 'vec', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + " = " + value_matr + '.x(' + value_vec + ');\n';
  return code;
};

Blockly.JavaScript['vec_multiplier'] = function(block) {
  var code, value_matr, value_vec;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  value_vec = Blockly.JavaScript.valueToCode(block, 'vec', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + " = " + value_matr + '.x(' + value_vec + ');\n';
  return code;
};

Blockly.JavaScript['vec_augmenter'] = function(block) {
  var code, value_matr, value_vec;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  value_vec = Blockly.JavaScript.valueToCode(block, 'vec', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + " = " + value_matr + '.add(' + value_vec + ');\n';
  return code;
};

Blockly.JavaScript['vec_diminuer'] = function(block) {
  var code, value_matr, value_vec;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  value_vec = Blockly.JavaScript.valueToCode(block, 'vec', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + " = " + value_matr + '.subtract(' + value_vec + ');\n';
  return code;
};

Blockly.JavaScript['sofus_scalaire'] = function(block) {
  var code, value_matr, value_vec;
  value_matr = Blockly.JavaScript.valueToCode(block, 'matr', Blockly.JavaScript.ORDER_ATOMIC);
  value_vec = Blockly.JavaScript.valueToCode(block, 'vec', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_matr + " = " + value_matr + '.dot(' + value_vec + ');\n';
  return code;
};

Blockly.JavaScript['mat_mult'] = function(block) {
  var code, value_autre, variable_lui;
  variable_lui = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('lui'), Blockly.Variables.NAME_TYPE);
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = variable_lui + '.multiply(' + value_autre + ')';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_arrondi'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.round()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_trace'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.trace()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['mat_transpose'] = function(block) {
  var code, value_autre;
  value_autre = Blockly.JavaScript.valueToCode(block, 'autre', Blockly.JavaScript.ORDER_ATOMIC);
  code = value_autre + '.transpose()';
  return [code, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['repeter_doucement'] = function(block) {
  var code, statements, times;
  times = Blockly.JavaScript.valueToCode(block, 'TIMES', Blockly.JavaScript.ORDER_ATOMIC);
  statements = Blockly.JavaScript.statementToCode(block, 'DO');
  return code = "for (var i = 0; i < " + times + "; i++) { setTimeout(function(){" + statements + "}, 1000);$('#graphique').show(100);}\n";
};

Blockly.JavaScript['lentement'] = function(block) {
  var code, statements;
  statements = Blockly.JavaScript.statementToCode(block, 'DO');
  return code = "turbo = false;\n" + statements + "\nturbo = true;\n";
};

Blockly.JavaScript['octet'] = function(block) {
  var octet;
  octet = 0;
  if (block.getFieldValue('O7') === 'TRUE') {
    octet += 128;
  }
  if (block.getFieldValue('O6') === 'TRUE') {
    octet += 64;
  }
  if (block.getFieldValue('O5') === 'TRUE') {
    octet += 32;
  }
  if (block.getFieldValue('O4') === 'TRUE') {
    octet += 16;
  }
  if (block.getFieldValue('O3') === 'TRUE') {
    octet += 8;
  }
  if (block.getFieldValue('O2') === 'TRUE') {
    octet += 4;
  }
  if (block.getFieldValue('O1') === 'TRUE') {
    octet += 2;
  }
  if (block.getFieldValue('O0') === 'TRUE') {
    octet += 1;
  }
  return [octet, Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['binaire'] = function(block) {
  var n;
  n = Blockly.JavaScript.valueToCode(block, 'N', Blockly.JavaScript.ORDER_ATOMIC);
  return ['Number((' + n + ').toString(2))', Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['envers'] = function(block) {
  var n;
  n = Blockly.JavaScript.valueToCode(block, 'N', Blockly.JavaScript.ORDER_ATOMIC);
  return ['Number(reverseT(""+' + n + '))', Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['kaprekar_doubler'] = function(block) {
  var n;
  n = Blockly.JavaScript.valueToCode(block, 'N', Blockly.JavaScript.ORDER_ATOMIC);
  return ['Number(""+' + n + '+' + n + ')', Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['cconcatener'] = function(block) {
  var a, b;
  a = Blockly.JavaScript.valueToCode(block, 'A', Blockly.JavaScript.ORDER_ATOMIC);
  b = Blockly.JavaScript.valueToCode(block, 'B', Blockly.JavaScript.ORDER_ATOMIC);
  return ['Number(""+' + a + '+' + b + ')', Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['kaprekar_ranger'] = function(block) {
  var n;
  n = Blockly.JavaScript.valueToCode(block, 'N', Blockly.JavaScript.ORDER_ATOMIC);
  return ['Number((' + n + ').toString().split("").sort().join(""))', Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['remplacer'] = function(block) {
  var code, var_c1, var_c2, var_t;
  var_c1 = Blockly.JavaScript.valueToCode(block, 'C1', Blockly.JavaScript.ORDER_ATOMIC);
  var_c2 = Blockly.JavaScript.valueToCode(block, 'C2', Blockly.JavaScript.ORDER_ATOMIC);
  var_t = Blockly.JavaScript.valueToCode(block, 'T', Blockly.JavaScript.ORDER_ATOMIC);
  code = 'var re = new RegExp(' + var_c1 + ',"g");\n';
  code += var_t + ' = ' + var_t + '.replace(re,' + var_c2 + ');\n';
  return code;
};

Blockly.JavaScript['remplacer1'] = function(block) {
  var code, var_c1, var_c2, var_t;
  var_c1 = Blockly.JavaScript.valueToCode(block, 'C1', Blockly.JavaScript.ORDER_ATOMIC);
  var_c2 = Blockly.JavaScript.valueToCode(block, 'C2', Blockly.JavaScript.ORDER_ATOMIC);
  var_t = Blockly.JavaScript.valueToCode(block, 'T', Blockly.JavaScript.ORDER_ATOMIC);
  code = 'var re = new RegExp(' + var_c1 + ');\n';
  code += var_t + ' = ' + var_t + '.replace(re,' + var_c2 + ');\n';
  return code;
};

Blockly.JavaScript['eval'] = function(block) {
  var prog;
  prog = Blockly.JavaScript.valueToCode(block, 'P', Blockly.JavaScript.ORDER_ATOMIC);
  return ['eval(' + prog + ')', Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['eval0'] = function(block) {
  var prog;
  prog = Blockly.JavaScript.valueToCode(block, 'P', Blockly.JavaScript.ORDER_ATOMIC);
  return 'eval(' + prog + ');\n';
};

Blockly.JavaScript['coffee'] = function(block) {
  var prog;
  prog = Blockly.JavaScript.valueToCode(block, 'P', Blockly.JavaScript.ORDER_ATOMIC);
  return ['CoffeeScript.run(' + prog + ')', Blockly.JavaScript.ORDER_NONE];
};

Blockly.JavaScript['coffee0'] = function(block) {
  var prog;
  prog = Blockly.JavaScript.valueToCode(block, 'P', Blockly.JavaScript.ORDER_ATOMIC);
  return 'CoffeeScript.run(' + prog + ');\n';
};

Blockly.JavaScript['inverser_frac'] = function(block) {
  var code, frac_1;
  frac_1 = Blockly.JavaScript.valueToCode(block, 'frac', Blockly.JavaScript.ORDER_ATOMIC);
  code = frac_1 + " = " + frac_1 + '.inverse();\n';
  return code;
};

Blockly.JavaScript['augmenter_frac'] = function(block) {
  var frac_1, frac_2;
  frac_1 = Blockly.JavaScript.valueToCode(block, 'frac1', Blockly.JavaScript.ORDER_ATOMIC);
  frac_2 = Blockly.JavaScript.valueToCode(block, 'frac2', Blockly.JavaScript.ORDER_ATOMIC);
  return frac_1 + ' = ' + frac_1 + '.plus(' + frac_2 + ');\n';
};

Blockly.JavaScript['diminuer_frac'] = function(block) {
  var frac_1, frac_2;
  frac_1 = Blockly.JavaScript.valueToCode(block, 'frac1', Blockly.JavaScript.ORDER_ATOMIC);
  frac_2 = Blockly.JavaScript.valueToCode(block, 'frac2', Blockly.JavaScript.ORDER_ATOMIC);
  return frac_1 + ' = ' + frac_1 + '.moins(' + frac_2 + ');\n';
};

Blockly.JavaScript['multiplier_frac'] = function(block) {
  var frac_1, frac_2;
  frac_1 = Blockly.JavaScript.valueToCode(block, 'frac1', Blockly.JavaScript.ORDER_ATOMIC);
  frac_2 = Blockly.JavaScript.valueToCode(block, 'frac2', Blockly.JavaScript.ORDER_ATOMIC);
  return frac_1 + ' = ' + frac_1 + '.fois(' + frac_2 + ');\n';
};

Blockly.JavaScript['diviser_frac'] = function(block) {
  var frac_1, frac_2;
  frac_1 = Blockly.JavaScript.valueToCode(block, 'frac1', Blockly.JavaScript.ORDER_ATOMIC);
  frac_2 = Blockly.JavaScript.valueToCode(block, 'frac2', Blockly.JavaScript.ORDER_ATOMIC);
  return frac_1 + ' = ' + frac_1 + '.sur(' + frac_2 + ');\n';
};
