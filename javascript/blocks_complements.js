// Generated by CoffeeScript 1.11.1
Blockly.Blocks['sophus_angle'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldAngle(90), 'NAME');
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('angle en degrés');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['sophus_carre'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_CARRE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.png',
          'width': 64,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_CARRE_TITLE_ITEM
        }, {
          'type': 'field_dropdown',
          'name': 'POW',
          'options': [['au carré', '2'], ['au cube', '3'], ['à la puissance 4', '4']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_CARRE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_CARRE_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_doubler'] = {
  init: function() {
    var dropdown, variable;
    dropdown = new Blockly.FieldDropdown([['doubler', '2'], ['tripler', '3'], ['quadrupler', '4'], ['quintupler', '5'], ['sextupler', '6'], ['décupler', '10'], ['centupler', '100']]);
    variable = new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME);
    this.appendDummyInput().appendField(new Blockly.FieldImage('./img/multiplier.png', 64, 32, '[*]:   ')).appendField(dropdown, 'CHOIX').appendField('').appendField(variable, 'VAR');
    this.setHelpUrl('');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(Blockly.Blocks.variables.HUE);
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_AUGMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 augmenter %2 de %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['pourcents', '100'], ['demis', '2'], ['tiers', '3'], ['quarts', '4'], ['cinquièmes', '5'], ['sixièmes', '6'], ['septièmes', '7'], ['huitièmes', '8'], ['neuvièmes', '9'], ['dixièmes', '10'], ['centièmes', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_augmenter_pct'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_AUGMENTER_PCT_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_PCT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.math.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_PCT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_PCT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIMINUER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 diminuer %2 de %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['pourcents', '100'], ['demis', '2'], ['tiers', '3'], ['quarts', '4'], ['cinquièmes', '5'], ['sixièmes', '6'], ['septièmes', '7'], ['huitièmes', '8'], ['neuvièmes', '9'], ['dixièmes', '10'], ['centièmes', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diminuer_pct'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIMINUER_PCT_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_PCT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.math.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_PCT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_PCT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_multiplier'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.png',
          'width': 64,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diviser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIVISER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.png',
          'width': 64,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_multiplier_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 multiplier %2 par %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.png',
          'width': 64,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['pourcents', '100'], ['demis', '2'], ['tiers', '3'], ['quarts', '4'], ['cinquièmes', '5'], ['sixièmes', '6'], ['septièmes', '7'], ['huitièmes', '8'], ['neuvièmes', '9'], ['dixièmes', '10'], ['centièmes', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_diviser_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 diviser %2 par %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.png',
          'width': 64,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['pourcents', '100'], ['demis', '2'], ['tiers', '3'], ['quarts', '4'], ['cinquièmes', '5'], ['sixièmes', '6'], ['septièmes', '7'], ['huitièmes', '8'], ['neuvièmes', '9'], ['dixièmes', '10'], ['centièmes', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DIVISER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIVISER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_arrondir'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 arrondir %2 à %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/arrondi.png',
          'width': 64,
          'height': 32,
          'alt': '[O]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_ARRONDIR_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'GRAD',
          'options': [['décimales', '1e-'], ['près', '']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_ARRONDIR_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_ARRONDIR_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_tronquer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 tronquer %2 à %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/troncature.png',
          'width': 64,
          'height': 32,
          'alt': '[o]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_TRONQUER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'GRAD',
          'options': [['décimales', '1e-'], ['près', '']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_TRONQUER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_TRONQUER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};


/*

Blockly.Blocks['sophus_arrondi'] = {
  init: function() {
    this.jsonInit({
  "message0": "arrondi de %1 à %2 %3",
  "args0": [
        {
          "type": "field_variable",
          "name": "VAR",
          "variable": Blockly.Msg.SOPHUS_ARRONDI_TITLE_ITEM
        },
    {
      "type": "field_dropdown",
      "name": "GRAD",
      "options": [
        [
          "décimales",
          "1e-"
        ],
        [
          "près",
          ""
        ]
      ]
    }
  ],
  "inputsInline": true,
  "output": "Number",
      "colour": Blockly.Blocks.math.HUE,
      "helpUrl": Blockly.Msg.SOPHUS_ARRONDI_HELPURL
});
    var thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_ARRONDI_TOOLTIP.replace('%1',
          thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};
 */

Blockly.Blocks['sophus_puissance'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_PUISSANCE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.png',
          'width': 64,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_PUISSANCE_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'POW',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_PUISSANCE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_PUISSANCE_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_inverser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_inverser',
      'message0': Blockly.Msg.SOPHUS_INVERSER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/inverse.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INVERSER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_INVERSER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INVERSER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_incrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_incrementer',
      'message0': Blockly.Msg.SOPHUS_INCREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INCREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_INCREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INCREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['sophus_decrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_decrementer',
      'message0': Blockly.Msg.SOPHUS_DECREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DECREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': Blockly.Blocks.variables.HUE,
      'helpUrl': Blockly.Msg.SOPHUS_DECREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DECREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['big_aff'] = {
  init: function() {
    this.appendValueInput('VAR').appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('ajouter en bas');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(20);
    this.setTooltip('afficher en bas de page');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['big_efface'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('palimpseste');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(20);
    this.setTooltip('effacer la sortie');
    this.setHelpUrl('https://fr.wikipedia.org/wiki/Palimpseste');
  }
};

Blockly.Blocks['tortue_x'] = {
  init: function() {
    this.appendDummyInput().appendField('abscisse de la tortue');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('abscisse actuelle de la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_y'] = {
  init: function() {
    this.appendDummyInput().appendField('ordonnée de la tortue');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('ordonnée actuelle de la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_t'] = {
  init: function() {
    this.appendDummyInput().appendField('angle de la tortue');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('angle que fait la tortue avec l\'horizontale');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_c'] = {
  init: function() {
    this.appendDummyInput().appendField('couleur de la tortue');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('couleur du stylo');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['avancer'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('avancer de');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('avancer la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['reculer'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('reculer de');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('reculer la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_gauche'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('vers la gauche de').appendField(new Blockly.FieldAngle(90), 'NAME');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('tourner la tortue vers la gauche');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_droite'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('vers la droite de').appendField(new Blockly.FieldAngle(90), 'NAME');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('tourner la tortue vers la droite');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['var_gauche'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('tourner à gauche de');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('tourner à gauche d\'un angle en degrés');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['var_droite'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('tourner à droite de');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('tourner à droite d\'un angle en degrés');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['frac_gauche'] = {
  init: function() {
    this.appendValueInput('NUMER').setCheck('Number').appendField('à gauche de');
    this.appendDummyInput().appendField('/ 6 d\'angle droit');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('tourner à gauche d\'un cran');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['frac_droite'] = {
  init: function() {
    this.appendValueInput('NUMER').setCheck('Number').appendField('à droite de');
    this.appendDummyInput().appendField('/ 6 d\'angle droit');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('tourner à droite d\'un cran');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mettre_angle'] = {
  init: function() {
    this.appendValueInput('ANGLE').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('orienter la tortue de');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('imposer une direction à la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['teleport'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('téléporter la tortue en (').appendField(new Blockly.FieldTextInput('0'), 'X').appendField(',').appendField(new Blockly.FieldTextInput('0'), 'Y').appendField(')');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('téléporter sans changer l\'angle ni faire de tracé');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tortue_teleport'] = {
  init: function() {
    this.appendValueInput('ABS').setCheck('Number').appendField('téléporter la tortue vers (');
    this.appendValueInput('ORD').setCheck('Number').appendField(',');
    this.appendDummyInput().appendField(')');
    this.setInputsInline(true);
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('téléporter la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tampon'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('marquer un point');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('marquer un cercle à l\'emplacement de la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['teleport_var'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('téléporter la tortue en (').appendField(new Blockly.FieldVariable('x'), 'X').appendField(',').appendField(new Blockly.FieldVariable('y'), 'Y').appendField(')');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('déplacer la tortue vers des coordonnées variables');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['cacher_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/ghost.png', 32, 32, '')).appendField('cacher la tortue');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('dorénavant la tortue est invisible');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['montrer_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('montrer la tortue');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('dorénavant la tortue est visible');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['lever_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('lever le stylo');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('dorénavant la tortue ne laisse plus de trace');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['baisser_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('baisser le stylo');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('dorénavant la tortue laisse des traces');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['scribe'] = {
  init: function() {
    this.appendValueInput('texte').appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('tamponner');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('la tortue écrit un texte là où elle est');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['couleur_stylo'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('toner du stylo à').appendField(new Blockly.FieldColour('#000066'), 'colstyle');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('changer la couleur du stylo');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['eff_svg'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('gommer le graphisme tortue');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('vider le graphique de la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['reset'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/droplet.png', 32, 32, '')).appendField('initialiser le graphisme tortue');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('initialiser le graphique de la tortue (sauf la couleur)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axeX'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('axe des abscisses');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('dessiner l\'axe des abscisses');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axeY'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('axe des ordonnées');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('dessiner l\'axe des ordonnées');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['axes'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('dessiner le repère');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('dessin des deux axes sur le graphique tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['grille'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/pencil.png', 32, 32, '')).appendField('dessiner une grille');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('grille orthonormée');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['creer_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Creer la tortue #').appendField(new Blockly.FieldTextInput('1'), 'N');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Creer une tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['creer_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Créer Tortue #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Créer une tortue (String)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['choisir_tortue'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Avec la tortue').appendField(new Blockly.FieldTextInput('1'), 'N');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Choisir une tortue');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('faire');
  }
};

Blockly.Blocks['choisir_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Avec la Tortue #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Avec la tortue (Number)');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('faire');
  }
};

Blockly.Blocks['distance_avec_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Distance avec la Tortue #');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('Distance avec la tortue (Number)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['tourner_vers_tortue_var'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Number').appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('Tourner vers la Tortue #');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Se tourner vers la tortue (Number)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume_suivant'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('avatar suivant');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('changer l\'aspect de la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume_pred'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('avatar précédent');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('changer l\'aspect de la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['costume'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldImage('img/turtle.png', 32, 32, '')).appendField('choisir l\'avatar').appendField(new Blockly.FieldDropdown([["origine", "0"], ["gauche", "1"], ["droit", "2"], ["Frenet", "3"], ["métal", "4"], ["classique", "5"]]), "CID");
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('changer l\'aspect de la tortue');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_const'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'x');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('2'), 'y');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vecteur 2D');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_3D'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'x');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('2'), 'y');
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('1'), 'z');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vecteur 3D');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_alea'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('vecteur aléatoire');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vecteur aléatoire');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_alea3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('vecteur aléatoire');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vecteur aléatoire');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_nul'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('vecteur nul');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vecteur nul');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_nul3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('vecteur nul');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vecteur nul');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_aff'] = {
  init: function() {
    this.appendValueInput('vec').appendField(new Blockly.FieldImage('img/arrowhead.png', 32, 32, ''));
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('visibilité des matrices');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_eq'] = {
  init: function() {
    this.appendValueInput('autre').setCheck(['Vector', 'Matrix']).appendField(new Blockly.FieldVariable('element'), 'lui').appendField('=');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('égalité de matrices');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_add'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('+');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('addition');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_sub'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('-');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('soustraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_dot'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('.');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('produit scalaire');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_angle'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('angle avec');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('');
    this.setHelpUrl('angle de vecteurs (en radians)');
  }
};

Blockly.Blocks['vec_distance'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('distance jusque');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('');
    this.setHelpUrl('distance entre vecteurs (considérés comme des points)');
  }
};

Blockly.Blocks['vec_abscisse'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('abscisse de');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('abscisse du vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_ordonnee'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('ordonnée de');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('ordonnée du vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_expr'] = {
  init: function() {
    this.appendDummyInput().appendField("Vecteur");
    this.appendValueInput("ABS").appendField("x: ");
    this.appendValueInput("ORD").appendField("y: ");
    this.setInputsInline(true);
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('vecteur variable');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_expr3D'] = {
  init: function() {
    this.appendDummyInput().appendField("Vecteur");
    this.appendValueInput("ABS").appendField("x: ");
    this.appendValueInput("ORD").appendField("y: ");
    this.appendValueInput("COT").appendField("z: ");
    this.setInputsInline(true);
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('vecteur variable');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_cote'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('cote de');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('cote du vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_colineaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('est colinéaire à');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('test de colinéarité (parallélisme ou alignement)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_perpendiculaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('est perpendiculaire à');
    this.setOutput(true, 'Boolean');
    this.setColour(20);
    this.setTooltip('perpendicularité entre vecteurs');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_fois'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Number').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('×');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('produit par un nombre');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_foisbis'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldTextInput('3'), 'facteur').appendField('×');
    this.setOutput(true);
    this.setColour(20);
    this.setTooltip('produit nombre*matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_symmetry'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('symétrique par rapport à');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('symétrie centrale');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_rotation'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField(new Blockly.FieldVariable('element'), 'lui').appendField('tourné de').appendField(new Blockly.FieldTextInput('3.14'), 'angle').appendField('radians autour de');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('rotation angle fixe');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_norme'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('norme de');
    this.setOutput(true, 'Number');
    this.setColour(20);
    this.setTooltip('norme (ou longueur)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_unitaire'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('normer');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('vecteur de norme 1 colinéaire à ce vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['normer_sofus'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Vector').appendField('normer');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('donner à ce vecteur une norme unité');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['inverser_mat'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('inverser');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('inverser la matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['transposer_mat'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('transposer');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('transposer la matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['arrondir_mat'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('arrondir');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('arrondir les coefficients de la matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mult_sofus_mat'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('multiplier');
    this.appendValueInput('vec').setCheck(null).appendField('par');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('multiplier la matrice par une matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mult_gauche'] = {
  init: function() {
    this.appendValueInput('vec').setCheck(null).appendField('multiplier');
    this.appendValueInput('matr').setCheck('Matrix').appendField('à gauche par');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(120);
    this.setTooltip('multiplier la matrice par une matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_multiplier'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Vector').appendField('multiplier');
    this.appendValueInput('vec').setCheck(null).appendField('par');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('multiplier le vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_augmenter'] = {
  init: function() {
    this.appendValueInput('matr').setCheck(null).appendField('augmenter');
    this.appendValueInput('vec').setCheck(null).appendField('de');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('additionner une matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_diminuer'] = {
  init: function() {
    this.appendValueInput('matr').setCheck(null).appendField('diminuer');
    this.appendValueInput('vec').setCheck(null).appendField('de');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('soustraire une matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['sofus_scalaire'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Vector').appendField('multiplier');
    this.appendValueInput('vec').setCheck('Vector').appendField('scalairement par');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(20);
    this.setTooltip('multiplier scalairement par un vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vec_diagonal'] = {
  init: function() {
    this.appendValueInput('vecteur').setCheck('Vector').appendField('diagonale');
    this.setOutput(true, 'Matrix');
    this.setColour(20);
    this.setTooltip('matrice diagonale');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_matrice'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('3'), 'a11').appendField(new Blockly.FieldTextInput('-2'), 'a12');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('1'), 'a21').appendField(new Blockly.FieldTextInput('5'), 'a22');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice 2 par 2');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_3D'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('8'), 'a11').appendField(new Blockly.FieldTextInput('1'), 'a12').appendField(new Blockly.FieldTextInput('6'), 'a13');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('3'), 'a21').appendField(new Blockly.FieldTextInput('5'), 'a22').appendField(new Blockly.FieldTextInput('7'), 'a23');
    this.appendDummyInput().appendField(new Blockly.FieldTextInput('4'), 'a31').appendField(new Blockly.FieldTextInput('9'), 'a32').appendField(new Blockly.FieldTextInput('2'), 'a33');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice 3 par 3');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_col'] = {
  init: function() {
    this.appendDummyInput().appendField("colonnes");
    this.appendValueInput("C1");
    this.appendValueInput("C2");
    this.setInputsInline(true);
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    return this.setTooltip('matrice par ses colonnes');
  }
};

Blockly.Blocks['mat3D_col'] = {
  init: function() {
    this.appendDummyInput().appendField("colonnes");
    this.appendValueInput("C1");
    this.appendValueInput("C2");
    this.appendValueInput("C3");
    this.setInputsInline(true);
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    return this.setTooltip('matrice par ses colonnes');
  }
};

Blockly.Blocks['mat_diag'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldTextInput('3'), 'a11').appendField('0');
    this.appendDummyInput().appendField('0').appendField(new Blockly.FieldTextInput('2'), 'a22');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice diagonale');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_id'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('1').appendField('0');
    this.appendDummyInput().appendField('0').appendField('1');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice identité');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_id3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('1').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('1').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('1');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice identité');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_alea'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldImage('img/die.png', 32, 32, 'X'));
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice aléatoire');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_alea3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField(new Blockly.FieldImage('img/die.png', 32, 32, 'X'));
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice aléatoire');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_nulle'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice nulle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_nulle3'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('0').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('0');
    this.appendDummyInput().appendField('0').appendField('0').appendField('0');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice nulle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_rotation'] = {
  init: function() {
    this.appendDummyInput().setAlign(Blockly.ALIGN_RIGHT).appendField('rotation d\'angle').appendField(new Blockly.FieldAngle(45), 'angle');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice de rotation');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne1'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('première colonne de');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('la première colonne de la matrice est un vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne2'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('deuxième colonne de');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('la deuxième colonne de la matrice est un vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_colonne3'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('troisième colonne de');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('la troisième colonne de la matrice est un vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_diagonal'] = {
  init: function() {
    this.appendValueInput('NAME').setCheck('Matrix').appendField('diagonale de');
    this.setOutput(true, 'Vector');
    this.setColour(20);
    this.setTooltip('la diagonale de la matrice est un vecteur');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_det'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('déterminant de');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('déterminant');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_inv'] = {
  init: function() {
    this.appendValueInput('matr').setCheck('Matrix').appendField('inverse de');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('matrice inverse');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_mult'] = {
  init: function() {
    this.appendValueInput('autre').appendField(new Blockly.FieldVariable('matrice'), 'lui').appendField('×');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('produit de matrices (ou de matrice et vecteur)');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_arrondi'] = {
  init: function() {
    this.appendValueInput('autre').appendField('arrondi de');
    this.setOutput(true);
    this.setColour(120);
    this.setTooltip('arrondi');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_trace'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Matrix').appendField('trace de');
    this.setOutput(true, 'Number');
    this.setColour(120);
    this.setTooltip('trace de la matrice');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['mat_transpose'] = {
  init: function() {
    this.appendValueInput('autre').setCheck('Matrix').appendField('transposée de');
    this.setOutput(true, 'Matrix');
    this.setColour(120);
    this.setTooltip('transposition matricielle');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['repeter_doucement'] = {
  init: function() {
    this.appendValueInput('TIMES').setCheck('Number').appendField('Repeter doucement');
    this.appendDummyInput().appendField('fois');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Repeter toutes les 500ms');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('faire');
  }
};

Blockly.Blocks['lentement'] = {
  init: function() {
    this.appendDummyInput().appendField('Très lentement');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(120);
    this.setTooltip('Ralentir la tortue (risqué)');
    this.setHelpUrl('');
    this.appendStatementInput('DO').appendField('faire');
  }
};

Blockly.Blocks['octet'] = {
  init: function() {
    this.appendDummyInput().appendField('octet ').appendField(new Blockly.FieldCheckbox("FALSE"), "O7").appendField(new Blockly.FieldCheckbox("FALSE"), "O6").appendField(new Blockly.FieldCheckbox("TRUE"), "O5").appendField(new Blockly.FieldCheckbox("FALSE"), "O4").appendField(new Blockly.FieldCheckbox("TRUE"), "O3").appendField(new Blockly.FieldCheckbox("FALSE"), "O2").appendField(new Blockly.FieldCheckbox("TRUE"), "O1").appendField(new Blockly.FieldCheckbox("FALSE"), "O0");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('représentation binaire d\'un entier');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['binaire'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("binaire");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('conversion en binaire représenté en décimal');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['envers'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("retourné de");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('mettre les chiffres à l\'envers');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['srevne'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("retourné de");
    this.setOutput(true, null);
    this.setColour(160);
    this.setTooltip('mettre les lettres à l\'envers');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['kaprekar_doubler'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("répété de");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('dupliquer les chiffres');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['cconcatener'] = {
  init: function() {
    this.appendValueInput("A").setCheck(null).appendField("le concaténé de");
    this.appendValueInput("B").setCheck(null).appendField("et");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('concaténer les chiffres');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['kaprekar_ranger'] = {
  init: function() {
    this.appendValueInput("N").setCheck(null).appendField("les chiffres triés de");
    this.setOutput(true, null);
    this.setColour(75);
    this.setTooltip('ranger les chiffres dans l\'ordre croissant');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['remplacer'] = {
  init: function() {
    this.appendDummyInput().appendField("remplacer les");
    this.appendValueInput("C1").setCheck(null);
    this.appendDummyInput().appendField("par des");
    this.appendValueInput("C2").setCheck(null);
    this.appendDummyInput().appendField("dans");
    this.appendValueInput("T").setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('substitution');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['remplacer1'] = {
  init: function() {
    this.appendDummyInput().appendField("remplacer le premier");
    this.appendValueInput("C1").setCheck(null);
    this.appendDummyInput().appendField("par");
    this.appendValueInput("C2").setCheck(null);
    this.appendDummyInput().appendField("dans");
    this.appendValueInput("T").setCheck(null);
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('substitution');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['eval'] = {
  init: function() {
    this.appendValueInput("P").setCheck(null).appendField("JS");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(270);
    this.setTooltip('JavaScript');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['eval0'] = {
  init: function() {
    this.appendValueInput("P").setCheck(null).appendField("JS");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(270);
    this.setTooltip('JavaScript');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['coffee'] = {
  init: function() {
    this.appendValueInput("P").setCheck(null).appendField("CS");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(270);
    this.setTooltip('CoffeeScript');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['coffee0'] = {
  init: function() {
    this.appendValueInput("P").setCheck(null).appendField(new Blockly.FieldImage('img/coffee.png', 32, 32, 'X'));
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(270);
    this.setTooltip('CoffeeScript');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['inverser_frac'] = {
  init: function() {
    this.appendValueInput('frac').setCheck('Fraction').appendField('inverser');
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('inverser la fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['augmenter_frac'] = {
  init: function() {
    this.appendValueInput('frac1').setCheck('Fraction').appendField('augmenter');
    this.appendValueInput('frac2').setCheck('Fraction').appendField('de');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('additionner une fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['diminuer_frac'] = {
  init: function() {
    this.appendValueInput('frac1').setCheck('Fraction').appendField('diminuer');
    this.appendValueInput('frac2').setCheck('Fraction').appendField('de');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('soustraire une fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['multiplier_frac'] = {
  init: function() {
    this.appendValueInput('frac1').setCheck('Fraction').appendField('multiplier');
    this.appendValueInput('frac2').setCheck('Fraction').appendField('par');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('multiplier par une fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['diviser_frac'] = {
  init: function() {
    this.appendValueInput('frac1').setCheck('Fraction').appendField('diviser');
    this.appendValueInput('frac2').setCheck('Fraction').appendField('par');
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('diviser par une fraction');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['pgcd'] = {
  init: function() {
    this.appendValueInput("A").setCheck(null).appendField("pgcd de");
    this.appendValueInput("B").setCheck(null).appendField("et");
    this.setInputsInline(true);
    this.setOutput(true, null);
    this.setColour(230);
    this.setTooltip('plus grand diviseur commun');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['doubler_frac'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldDropdown([["doubler", "2"], ["tripler", "3"], ["quadrupler", "4"], ["quintupler", "5"], ["sextupler", "6"], ["octupler", "8"], ["décupler", "10"], ["centupler", "100"]]), "CHOIX");
    this.appendValueInput("VAR").setCheck("Fraction");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(45);
    this.setTooltip('multiplier la fraction par un entier');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['doubler_vec'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldDropdown([["doubler", "2"], ["tripler", "3"], ["quadrupler", "4"], ["quintupler", "5"], ["sextupler", "6"], ["octupler", "8"], ["décupler", "10"], ["centupler", "100"]]), "CHOIX");
    this.appendValueInput("VAR");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(30);
    this.setTooltip('multiplier la matrice par un entier');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['humain'] = {
  init: function() {
    this.appendDummyInput().appendField("un").appendField(new Blockly.FieldImage("../Sophus/img/man.png", 32, 32, "humain"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('les humains disent toujours la vérité');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['vampire'] = {
  init: function() {
    this.appendDummyInput().appendField("un").appendField(new Blockly.FieldImage("../Sophus/img/vampire.png", 32, 32, "vampire"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('les vampires mentent toujours');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['sain'] = {
  init: function() {
    this.appendDummyInput().appendField("un").appendField(new Blockly.FieldImage("../Sophus/img/healthy.png", 32, 32, "sain d'esprit"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('les sains d\'esprit ne croient qu\'en des choses vraies');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['fou'] = {
  init: function() {
    this.appendDummyInput().appendField("un").appendField(new Blockly.FieldImage("../Sophus/img/crazy.png", 32, 32, "fou"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('les fous ne croient qu\'en des choses fausses');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['patient'] = {
  init: function() {
    this.appendDummyInput().appendField("un").appendField(new Blockly.FieldImage("../Sophus/img/sick.png", 32, 32, "patient"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('celui qui est soigné, mais est-il vraiment malade ?');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['docteur'] = {
  init: function() {
    this.appendDummyInput().appendField("un").appendField(new Blockly.FieldImage("../Sophus/img/medical.png", 32, 32, "docteur"));
    this.setOutput(true, null);
    this.setColour(330);
    this.setTooltip('Un médecin, est-il sain d\'esprit ou est-il fou ?');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['transyl_etat'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldVariable("transylvanien"), "NAME").appendField("est").appendField(new Blockly.FieldDropdown([["humain", "moi.humain"], ["vampire", "!moi.humain"], ["sain d'esprit", "moi.sain"], ["fou", "!moi.sain"], ["un patient", "!moi.docteur"], ["un médecin", "moi.docteur"]]), "etat");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour(330);
    this.setTooltip('l\'état dans lequel se trouve un transylvanien');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['devenir'] = {
  init: function() {
    this.appendDummyInput().appendField(new Blockly.FieldVariable("transylvanien"), "NAME").appendField("devient").appendField(new Blockly.FieldDropdown([["humain", ".humain = true"], ["vampire", ".humain = false"], ["sain d'esprit", ".sain = true"], ["fou", ".sain = false"], ["un patient", ".docteur = false"], ["un médecin", ".docteur = true"]]), "etat");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(330);
    this.setTooltip('évolution des transylvaniens');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['dire'] = {
  init: function() {
    this.appendValueInput("NAME").setCheck("Boolean").appendField(new Blockly.FieldVariable("transylvanien"), "NAME").appendField("dit que");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour(330);
    this.setTooltip('affirmation');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['croire'] = {
  init: function() {
    this.appendValueInput("NAME").setCheck("Boolean").appendField(new Blockly.FieldVariable("transylvanien"), "NAME").appendField("croit que");
    this.setInputsInline(true);
    this.setOutput(true, "Boolean");
    this.setColour(330);
    this.setTooltip('croyance');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['transyl_affectation'] = {
  init: function() {
    this.appendValueInput("NAME").setCheck("Boolean").appendField("positionner").appendField(new Blockly.FieldDropdown([["l'humanité", ".humain = "], ["la santé mentale", ".sain = "], ["la médicalité", ".docteur = "]]), "PROP").appendField("de").appendField(new Blockly.FieldVariable("transylvanien"), "NAME").appendField("à");
    this.setInputsInline(true);
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(330);
    this.setTooltip('imposer des propriétés');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['developper'] = {
  init: function() {
    this.appendDummyInput().appendField("développer").appendField(new Blockly.FieldVariable("expression"), "EXPR");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('développer une expression');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['simplifier'] = {
  init: function() {
    this.appendDummyInput().appendField("simplifier").appendField(new Blockly.FieldVariable("expression"), "EXPR");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('simplifier une expression');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['deriver'] = {
  init: function() {
    this.appendDummyInput().appendField("dériver").appendField(new Blockly.FieldVariable("expression"), "EXPR");
    this.setPreviousStatement(true, null);
    this.setNextStatement(true, null);
    this.setColour(150);
    this.setTooltip('dériver une expression par rapport à sa variable');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['solutions'] = {
  init: function() {
    this.appendValueInput("EQU").setCheck(null).appendField("solutions de");
    this.setOutput(true, null);
    this.setColour(150);
    this.setTooltip('résoudre une équation');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['embelli'] = {
  init: function() {
    this.appendValueInput("EQU").setCheck(null).appendField("embelli de");
    this.setOutput(true, null);
    this.setColour(150);
    this.setTooltip('écrire mieux');
    this.setHelpUrl('');
  }
};

Blockly.Blocks['CAS_carre'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_CARRE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.png',
          'width': 64,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_CARRE_TITLE_ITEM
        }, {
          'type': 'field_dropdown',
          'name': 'POW',
          'options': [['au carré', '2'], ['au cube', '3'], ['à la puissance 4', '4']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_CARRE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_CARRE_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_doubler'] = {
  init: function() {
    var dropdown, variable;
    dropdown = new Blockly.FieldDropdown([['doubler', '2'], ['tripler', '3'], ['quadrupler', '4'], ['quintupler', '5'], ['sextupler', '6'], ['décupler', '10'], ['centupler', '100']]);
    variable = new Blockly.FieldVariable(Blockly.Msg.VARIABLES_DEFAULT_NAME);
    this.appendDummyInput().appendField(new Blockly.FieldImage('./img/multiplier.png', 64, 32, '[*]:   ')).appendField(dropdown, 'CHOIX').appendField('').appendField(variable, 'VAR');
    this.setHelpUrl('');
    this.setPreviousStatement(true);
    this.setNextStatement(true);
    this.setColour(165);
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_puissance'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_PUISSANCE_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/puissance.png',
          'width': 64,
          'height': 32,
          'alt': '[^]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_PUISSANCE_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'POW',
          'check': 'Number'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_PUISSANCE_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_PUISSANCE_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_inverser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'sophus_inverser',
      'message0': Blockly.Msg.SOPHUS_INVERSER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/inverse.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INVERSER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_INVERSER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INVERSER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_augmenter_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 augmenter %2 de %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['pourcents', '100'], ['demis', '2'], ['tiers', '3'], ['quarts', '4'], ['cinquièmes', '5'], ['sixièmes', '6'], ['septièmes', '7'], ['huitièmes', '8'], ['neuvièmes', '9'], ['dixièmes', '10'], ['centièmes', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_diminuer_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 diminuer %2 de %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['pourcents', '100'], ['demis', '2'], ['tiers', '3'], ['quarts', '4'], ['cinquièmes', '5'], ['sixièmes', '6'], ['septièmes', '7'], ['huitièmes', '8'], ['neuvièmes', '9'], ['dixièmes', '10'], ['centièmes', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_multiplier_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 multiplier %2 par %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.png',
          'width': 64,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['pourcents', '100'], ['demis', '2'], ['tiers', '3'], ['quarts', '4'], ['cinquièmes', '5'], ['sixièmes', '6'], ['septièmes', '7'], ['huitièmes', '8'], ['neuvièmes', '9'], ['dixièmes', '10'], ['centièmes', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_diviser_fract'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': '%1 diviser %2 par %3 %4',
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.png',
          'width': 64,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_FRACT_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }, {
          'type': 'field_dropdown',
          'name': 'DENOM',
          'options': [['pourcents', '100'], ['demis', '2'], ['tiers', '3'], ['quarts', '4'], ['cinquièmes', '5'], ['sixièmes', '6'], ['septièmes', '7'], ['huitièmes', '8'], ['neuvièmes', '9'], ['dixièmes', '10'], ['centièmes', '100']]
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'inputsInline': true,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_DIVISER_FRACT_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIVISER_FRACT_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_augmenter'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_AUGMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[+]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_AUGMENTER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_AUGMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_AUGMENTER_TOOLTIP.replace('%1', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_diminuer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIMINUER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[-]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIMINUER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_DIMINUER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DIMINUER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_multiplier'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/multiplier.png',
          'width': 64,
          'height': 32,
          'alt': '[*]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_MULTIPLIER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_diviser'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'message0': Blockly.Msg.SOPHUS_DIVISER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diviser.png',
          'width': 64,
          'height': 32,
          'alt': '[/]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DIVISER_TITLE_ITEM
        }, {
          'type': 'input_value',
          'name': 'DELTA'
        }
      ],
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_MULTIPLIER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_MULTIPLIER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_incrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'CAS_incrementer',
      'message0': Blockly.Msg.SOPHUS_INCREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/augmenter.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_INCREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_INCREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_INCREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};

Blockly.Blocks['CAS_decrementer'] = {
  init: function() {
    var thisBlock;
    this.jsonInit({
      'id': 'CAS_decrementer',
      'message0': Blockly.Msg.SOPHUS_DECREMENTER_TITLE,
      'args0': [
        {
          'type': 'field_image',
          'src': './img/diminuer.png',
          'width': 64,
          'height': 32,
          'alt': '[un]:   '
        }, {
          'type': 'field_variable',
          'name': 'VAR',
          'variable': Blockly.Msg.SOPHUS_DECREMENTER_TITLE_ITEM
        }
      ],
      'inputsInline': true,
      'previousStatement': null,
      'nextStatement': null,
      'colour': 165,
      'helpUrl': Blockly.Msg.SOPHUS_DECREMENTER_HELPURL
    });
    thisBlock = this;
    this.setTooltip(function() {
      return Blockly.Msg.SOPHUS_DECREMENTER_TOOLTIP.replace('%2', thisBlock.getFieldValue('VAR'));
    });
  },
  getVars: function() {
    return [this.getFieldValue('VAR')];
  },
  renameVar: function(oldName, newName) {
    if (Blockly.Names.equals(oldName, this.getFieldValue('VAR'))) {
      this.setFieldValue(newName, 'VAR');
    }
  }
};
